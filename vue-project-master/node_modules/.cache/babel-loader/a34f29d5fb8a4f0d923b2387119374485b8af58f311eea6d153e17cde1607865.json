{"ast":null,"code":"import _defineProperty from \"D:/Projects/Vue/Pro Max/vue-project-last-edition/vue-project-last-edition/vue-project/vue-project-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { Status } from \"./constants.js\";\nclass Database {\n  static getFlow() {\n    return JSON.parse(localStorage.getItem(\"businessFlow\"));\n  }\n  static getFlowForRequestId(requestId) {\n    const requestType = Database.getRequestWithId(requestId).requestType;\n    const businessFlow = Database.getFlow();\n    return businessFlow[requestType];\n  }\n  static isRequestMine(userId, requestId) {\n    const request = Database.getRequestWithId(requestId);\n    return request.userId = userId;\n  }\n  static isRoleManager(role) {\n    return role != 4;\n  }\n  static isCurrentUserManager() {\n    const user = Database.getCurrentUser();\n    return user.role != 4;\n  }\n  static isShowRejectAccpetForUserRequest(userId, requestId) {\n    const flow = Database.getFlowForRequestId(requestId);\n    const request = Database.getRequestWithId(requestId);\n    const user = Database.getUserWithId(userId);\n    const index = flow.indexOf(user.role);\n    if (index != request.step) return false;\n    return request.status != Status.Accepted && request.status != Status.Rejected;\n  }\n  static getTypeForRoleToSend(role, requestId) {\n    console.log(role);\n    console.log(requestId);\n    return 0;\n  }\n  static isShowUserIdRequest(userId, requestId) {\n    const user = Database.getUserWithId(userId);\n    const flow = Database.getFlowForRequestId(requestId);\n    const request = Database.getRequestWithId(requestId);\n    const index = flow.indexOf(user.role);\n    if (index == -1) {\n      return request.userId == userId;\n    }\n    if (index <= request.step) return true;\n    return false;\n  }\n  static isShowAsNotificationUserIdRequest(userId, requestId) {\n    const user = Database.getUserWithId(userId);\n    const flow = Database.getFlowForRequestId(requestId);\n    const request = Database.getRequestWithId(requestId);\n    const index = flow.indexOf(user.role);\n    if (index == -1) {\n      return request.userId == userId;\n    }\n    if (index <= request.step) return false;\n    if (request.status == Status.Rejected) return true;\n    return false;\n  }\n  static getStatusForRoleRequest(role, requestId) {\n    const flow = Database.getFlowForRequestId(requestId);\n    const request = Database.getRequestWithId(requestId);\n    const index = flow.indexOf(role);\n    if (index == -1) {\n      // if I am not in the flow then it must be my request\n      return request.status;\n    } else if (index < request.step) {\n      return Status.Accepted;\n    } else if (index == request.step) {\n      return request.status;\n    }\n  }\n  static getRoles() {\n    return JSON.parse(localStorage.getItem(\"roles\"));\n  }\n  static getAtRoleNameForRequest(requestId) {\n    const roles = Database.getRoles();\n    const request = Database.getRequestWithId(requestId);\n    const flow = Database.getFlowForRequestId(requestId);\n    return roles[flow[request.step]];\n  }\n  static IsRequestStepAtUserId(userId, requestId) {\n    const user = Database.getUserWithId(userId);\n    const request = Database.getRequestWithId(requestId);\n    const flow = Database.getFlowForRequestId(requestId);\n    return flow[request.step] == user.role;\n  }\n  static getStatusMessageForUserIdRequest(userId, requestId) {\n    const user = this.getUserWithId(userId);\n    const status = this.getStatusForRoleRequest(user.role, requestId);\n    const request = Database.getRequestWithId(requestId);\n    const flow = Database.getFlowForRequestId(requestId);\n    if (request.userId == userId) {\n      // meaning it's my request\n      if (request.step == flow.length - 1 && (request.status == Status.Accepted || request.status == Status.Rejected)) {\n        return Status[status].EmployeeMessage.toString();\n      } else {\n        return Status[status].EmployeeMessage.toString() + \" عند \" + Database.getAtRoleNameForRequest(requestId); // complete\n      }\n    } else {\n      return Status[status].ManagerMessage;\n    }\n  }\n  static initDatabase() {\n    let requestTable = [];\n    let roles = {\n      0: \"رئيس الجامعة\",\n      1: \"نائب إداري\",\n      2: \"شؤون الموظفين\",\n      3: \"مدير الدائرة الإدارية\",\n      4: \"موظف\"\n    };\n    let businessFlow = {\n      0: [3, 2, 1, 0],\n      1: [3, 2, 1],\n      2: [1, 0],\n      3: [2, 1, 0]\n    };\n    let notifications = [];\n    let userTable = [{\n      userId: 0,\n      name: \"قصي أبو سوط\",\n      username: \"a\",\n      password: \"a\",\n      role: 0,\n      email: \"q2016@gmail.com\",\n      phoneNumber: \"0599382984\",\n      management: \"كلية الطب\"\n    }, {\n      userId: 1,\n      name: \"قصي أبو سوط\",\n      username: \"b\",\n      password: \"b\",\n      role: 1,\n      email: \"q2016@gmail.com\",\n      phoneNumber: \"0599382984\",\n      management: \"كلية الطب\"\n    }, {\n      userId: 2,\n      name: \"محمد بن بلال\",\n      username: \"c\",\n      password: \"c\",\n      role: 2,\n      email: \"moh2020@gmail.com\",\n      phoneNumber: \"0569581089\",\n      management: \"كلية الطب\"\n    }, {\n      userId: 3,\n      name: \"أبو شريف\",\n      username: \"d\",\n      password: \"d\",\n      role: 3,\n      email: \"test@gmail.com\",\n      phoneNumber: \"0595118296\",\n      management: \"شؤون الطلبة\"\n    }, {\n      userId: 4,\n      name: \"محمد بلال\",\n      username: \"e\",\n      password: \"e\",\n      role: 4,\n      email: \"test@gmail.com\",\n      phoneNumber: \"0595118296\",\n      management: \"كلية التكنولوجيا\"\n    }];\n    localStorage.setItem(\"userTable\", JSON.stringify(userTable));\n    localStorage.setItem(\"requestTable\", JSON.stringify(requestTable));\n    localStorage.setItem(\"businessFlow\", JSON.stringify(businessFlow));\n    localStorage.setItem(\"roles\", JSON.stringify(roles));\n    localStorage.setItem(\"notificationsSeen\", JSON.stringify(notifications));\n    let users = JSON.parse(localStorage.getItem(\"userTable\"));\n    let requests = JSON.parse(localStorage.getItem(\"requestTable\"));\n    localStorage.setItem(\"userTable\", JSON.stringify(users));\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\n  }\n  static gitUserRole(rool) {\n    let roles = {\n      0: \"رئيس الجامعة\",\n      1: \"نائب إداري\",\n      2: \"شؤون الموظفين\",\n      3: \"مدير الدائرة الإدارية\",\n      4: \"موظف\"\n    };\n    if (rool == 0) {\n      return roles[0];\n    } else if (rool == 1) {\n      return roles[1];\n    } else if (this.getCurrentUser.role == 2) {\n      return roles[2];\n    } else if (this.getCurrentUser.role == 3) {\n      return roles[3];\n    } else if (this.getCurrentUser.role == 4) {\n      return roles[4];\n    }\n  }\n  static getNotificationsSeen() {\n    return JSON.parse(localStorage.getItem(\"notificationsSeen\"));\n  }\n  static getCurrentUserId() {\n    return JSON.parse(localStorage.getItem(\"currentUserId\"));\n  }\n  static getNameforRequestId() {\n    return this.getUserWithId(this.getRequestArray().userId).name;\n  }\n  static setCurrentUserId(userId) {\n    localStorage.setItem(\"currentUserId\", JSON.stringify(userId));\n  }\n  static getAllUsersWithoutCurrentId(userId) {\n    return this.getRequestArray().filter(request => request.userId != userId);\n  }\n  static getCurrentUser() {\n    return Database.getUserWithId(JSON.parse(localStorage.getItem(\"currentUserId\")));\n  }\n  static getUsersArray() {\n    return JSON.parse(localStorage.getItem(\"userTable\"));\n  }\n  static getUserWithId(userId) {\n    return Database.getUsersArray().find(user => user.userId === userId);\n  }\n  static getRequestArray() {\n    return JSON.parse(localStorage.getItem(\"requestTable\"));\n  }\n  static getRequestArrayToShowForUserId(userId) {\n    let requests = Database.getRequestArray();\n    requests = requests.filter(request => {\n      return this.isShowUserIdRequest(userId, request.requestId);\n    });\n    return requests;\n  }\n  static addNotificationSeen(userId, requestId) {\n    let notificationsSeen = Database.getNotificationsSeen();\n    if (!Database.IsSeenNotification(userId, requestId)) {\n      notificationsSeen.push({\n        userId: userId,\n        requestId: requestId\n      });\n      localStorage.setItem(\"notificationsSeen\", JSON.stringify(notificationsSeen));\n    }\n  }\n  static getNotificationMessageUserIdRequest(userId, requestId) {\n    if (Database.IsSeenNotification(userId, requestId)) {\n      return \"مقروء\";\n    } else {\n      return \"غير مقروء\";\n    }\n  }\n  static IsSeenNotification(userId, requestId) {\n    const notificationsSeenArray = Database.getNotificationsSeen();\n    let seen = false;\n    notificationsSeenArray.forEach(notificationSeen => {\n      if (notificationSeen.userId == userId && notificationSeen.requestId == requestId) {\n        seen = true;\n      }\n    });\n    return seen;\n  }\n  static getNotificationCountForUserId(userId) {\n    let requests = Database.getRequestArray();\n    let count = 0;\n    requests.map(request => {\n      if (Database.isShowAsNotificationUserIdRequest(userId, request.requestId) && !Database.IsSeenNotification(userId, request.requestId)) {\n        count += 1;\n      }\n    });\n    return count;\n  }\n  static getRequestArrayToShowAsNotificationForUserId(userId) {\n    let requests = Database.getRequestArray();\n    requests = requests.filter(request => {\n      return this.isShowAsNotificationUserIdRequest(userId, request.requestId);\n    });\n    return requests;\n  }\n  static getRequestArrayWithUserId(userId) {\n    return Database.getRequestArray().filter(request => request.userId === userId);\n  }\n  static getRequestWithId(requestId) {\n    return Database.getRequestArray().filter(request => request.requestId === requestId)[0];\n  }\n  static getCurrentUserRole() {\n    return Database.getCurrentUser().role;\n  }\n  static addRequest(request) {\n    const requestTableFromLocalStorage = Database.getRequestArray();\n    requestTableFromLocalStorage.push(request);\n    localStorage.setItem(\"requestTable\", JSON.stringify(requestTableFromLocalStorage));\n  }\n  static isActionTaken(requestId) {\n    let request = Database.getRequestWithId(requestId);\n    return request.status == Status.Accepted || request.status == Status.Rejected;\n  }\n  static isRequestRejected(requestId) {\n    let request = Database.getRequestWithId(requestId);\n    return request.status == Status.Rejected;\n  }\n  static rejectRequest(requestId, rejectReason) {\n    const requests = Database.getRequestArray();\n    requests.filter(request => {\n      if (request.requestId == requestId) {\n        request.status = Status.Rejected;\n        request.rejectReason = rejectReason;\n      }\n    });\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\n  }\n  static acceptRequest(requestId) {\n    const requests = Database.getRequestArray();\n    const flow = Database.getFlowForRequestId(requestId);\n    requests.filter(request => {\n      if (request.requestId == requestId) {\n        if (request.step == flow.length - 1) {\n          request.status = Status.Accepted;\n        } else {\n          request.status = Status.NotSeen;\n          request.step += 1;\n        }\n      }\n    });\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\n  }\n  static makeRequestSeen(requestId) {\n    const requests = Database.getRequestArray();\n    requests.filter(request => {\n      if (request.requestId == requestId) {\n        request.status = Status.Seen;\n      }\n    });\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\n  }\n  static getUniqueId() {\n    return Database.getRequestArray().length;\n  }\n}\n_defineProperty(Database, \"currentUserId\", null);\nexport default Database;","map":{"version":3,"names":["Status","Database","getFlow","JSON","parse","localStorage","getItem","getFlowForRequestId","requestId","requestType","getRequestWithId","businessFlow","isRequestMine","userId","request","isRoleManager","role","isCurrentUserManager","user","getCurrentUser","isShowRejectAccpetForUserRequest","flow","getUserWithId","index","indexOf","step","status","Accepted","Rejected","getTypeForRoleToSend","console","log","isShowUserIdRequest","isShowAsNotificationUserIdRequest","getStatusForRoleRequest","getRoles","getAtRoleNameForRequest","roles","IsRequestStepAtUserId","getStatusMessageForUserIdRequest","length","EmployeeMessage","toString","ManagerMessage","initDatabase","requestTable","notifications","userTable","name","username","password","email","phoneNumber","management","setItem","stringify","users","requests","gitUserRole","rool","getNotificationsSeen","getCurrentUserId","getNameforRequestId","getRequestArray","setCurrentUserId","getAllUsersWithoutCurrentId","filter","getUsersArray","find","getRequestArrayToShowForUserId","addNotificationSeen","notificationsSeen","IsSeenNotification","push","getNotificationMessageUserIdRequest","notificationsSeenArray","seen","forEach","notificationSeen","getNotificationCountForUserId","count","map","getRequestArrayToShowAsNotificationForUserId","getRequestArrayWithUserId","getCurrentUserRole","addRequest","requestTableFromLocalStorage","isActionTaken","isRequestRejected","rejectRequest","rejectReason","acceptRequest","NotSeen","makeRequestSeen","Seen","getUniqueId","_defineProperty"],"sources":["D:/Projects/Vue/Pro Max/vue-project-last-edition/vue-project-last-edition/vue-project/vue-project-master/database.js"],"sourcesContent":["import { Status } from \"./constants.js\";\r\nclass Database {\r\n  static currentUserId = null;\r\n  static getFlow() {\r\n    return JSON.parse(localStorage.getItem(\"businessFlow\"));\r\n  }\r\n  static getFlowForRequestId(requestId) {\r\n    const requestType = Database.getRequestWithId(requestId).requestType;\r\n    const businessFlow = Database.getFlow();\r\n    return businessFlow[requestType];\r\n  }\r\n  static isRequestMine(userId, requestId) {\r\n    const request = Database.getRequestWithId(requestId);\r\n    return (request.userId = userId);\r\n  }\r\n  static isRoleManager(role) {\r\n    return role != 4;\r\n  }\r\n  static isCurrentUserManager() {\r\n    const user = Database.getCurrentUser();\r\n    return user.role != 4;\r\n  }\r\n  static isShowRejectAccpetForUserRequest(userId, requestId) {\r\n    const flow = Database.getFlowForRequestId(requestId);\r\n    const request = Database.getRequestWithId(requestId);\r\n    const user = Database.getUserWithId(userId);\r\n    const index = flow.indexOf(user.role);\r\n    if (index != request.step) return false;\r\n    return (\r\n      request.status != Status.Accepted && request.status != Status.Rejected\r\n    );\r\n  }\r\n  static getTypeForRoleToSend(role, requestId) {\r\n    console.log(role);\r\n    console.log(requestId);\r\n    return 0;\r\n  }\r\n  static isShowUserIdRequest(userId, requestId) {\r\n    const user = Database.getUserWithId(userId);\r\n    const flow = Database.getFlowForRequestId(requestId);\r\n    const request = Database.getRequestWithId(requestId);\r\n    const index = flow.indexOf(user.role);\r\n    if (index == -1) {\r\n      return request.userId == userId;\r\n    }\r\n    if (index <= request.step) return true;\r\n    return false;\r\n  }\r\n  static isShowAsNotificationUserIdRequest(userId, requestId) {\r\n    const user = Database.getUserWithId(userId);\r\n    const flow = Database.getFlowForRequestId(requestId);\r\n    const request = Database.getRequestWithId(requestId);\r\n    const index = flow.indexOf(user.role);\r\n    if (index == -1) {\r\n      return request.userId == userId;\r\n    }\r\n    if (index <= request.step) return false;\r\n    if (request.status == Status.Rejected) return true;\r\n    return false;\r\n  }\r\n  static getStatusForRoleRequest(role, requestId) {\r\n    const flow = Database.getFlowForRequestId(requestId);\r\n    const request = Database.getRequestWithId(requestId);\r\n    const index = flow.indexOf(role);\r\n    if (index == -1) {\r\n      // if I am not in the flow then it must be my request\r\n      return request.status;\r\n    } else if (index < request.step) {\r\n      return Status.Accepted;\r\n    } else if (index == request.step) {\r\n      return request.status;\r\n    }\r\n  }\r\n\r\n  static getRoles() {\r\n    return JSON.parse(localStorage.getItem(\"roles\"));\r\n  }\r\n  static getAtRoleNameForRequest(requestId) {\r\n    const roles = Database.getRoles();\r\n    const request = Database.getRequestWithId(requestId);\r\n    const flow = Database.getFlowForRequestId(requestId);\r\n    return roles[flow[request.step]];\r\n  }\r\n  static IsRequestStepAtUserId(userId, requestId) {\r\n    const user = Database.getUserWithId(userId);\r\n    const request = Database.getRequestWithId(requestId);\r\n    const flow = Database.getFlowForRequestId(requestId);\r\n    return flow[request.step] == user.role;\r\n  }\r\n  static getStatusMessageForUserIdRequest(userId, requestId) {\r\n    const user = this.getUserWithId(userId);\r\n    const status = this.getStatusForRoleRequest(user.role, requestId);\r\n    const request = Database.getRequestWithId(requestId);\r\n    const flow = Database.getFlowForRequestId(requestId);\r\n    if (request.userId == userId) {\r\n      // meaning it's my request\r\n      if (\r\n        request.step == flow.length - 1 &&\r\n        (request.status == Status.Accepted || request.status == Status.Rejected)\r\n      ) {\r\n        return Status[status].EmployeeMessage.toString();\r\n      } else {\r\n        return (\r\n          Status[status].EmployeeMessage.toString() +\r\n          \" عند \" +\r\n          Database.getAtRoleNameForRequest(requestId)\r\n        ); // complete\r\n      }\r\n    } else {\r\n      return Status[status].ManagerMessage;\r\n    }\r\n  }\r\n  static initDatabase() {\r\n    let requestTable = [];\r\n    let roles = {\r\n      0: \"رئيس الجامعة\",\r\n      1: \"نائب إداري\",\r\n      2: \"شؤون الموظفين\",\r\n      3: \"مدير الدائرة الإدارية\",\r\n      4: \"موظف\",\r\n    };\r\n    let businessFlow = {\r\n      0: [3, 2, 1, 0],\r\n      1: [3, 2, 1],\r\n      2: [1, 0],\r\n      3: [2, 1, 0],\r\n    };\r\n    let notifications = [];\r\n    let userTable = [\r\n      {\r\n        userId: 0,\r\n        name: \"قصي أبو سوط\",\r\n        username: \"a\",\r\n        password: \"a\",\r\n        role: 0,\r\n        email: \"q2016@gmail.com\",\r\n        phoneNumber: \"0599382984\",\r\n        management: \"كلية الطب\",\r\n      },\r\n      {\r\n        userId: 1,\r\n        name: \"قصي أبو سوط\",\r\n        username: \"b\",\r\n        password: \"b\",\r\n        role: 1,\r\n        email: \"q2016@gmail.com\",\r\n        phoneNumber: \"0599382984\",\r\n        management: \"كلية الطب\",\r\n      },\r\n      {\r\n        userId: 2,\r\n        name: \"محمد بن بلال\",\r\n        username: \"c\",\r\n        password: \"c\",\r\n        role: 2,\r\n        email: \"moh2020@gmail.com\",\r\n        phoneNumber: \"0569581089\",\r\n        management: \"كلية الطب\",\r\n      },\r\n      {\r\n        userId: 3,\r\n        name: \"أبو شريف\",\r\n        username: \"d\",\r\n        password: \"d\",\r\n        role: 3,\r\n        email: \"test@gmail.com\",\r\n        phoneNumber: \"0595118296\",\r\n        management: \"شؤون الطلبة\",\r\n      },\r\n      {\r\n        userId: 4,\r\n        name: \"محمد بلال\",\r\n        username: \"e\",\r\n        password: \"e\",\r\n        role: 4,\r\n        email: \"test@gmail.com\",\r\n        phoneNumber: \"0595118296\",\r\n        management: \"كلية التكنولوجيا\",\r\n      },\r\n    ];\r\n\r\n    localStorage.setItem(\"userTable\", JSON.stringify(userTable));\r\n    localStorage.setItem(\"requestTable\", JSON.stringify(requestTable));\r\n    localStorage.setItem(\"businessFlow\", JSON.stringify(businessFlow));\r\n    localStorage.setItem(\"roles\", JSON.stringify(roles));\r\n    localStorage.setItem(\"notificationsSeen\", JSON.stringify(notifications));\r\n\r\n    let users = JSON.parse(localStorage.getItem(\"userTable\"));\r\n    let requests = JSON.parse(localStorage.getItem(\"requestTable\"));\r\n\r\n    localStorage.setItem(\"userTable\", JSON.stringify(users));\r\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\r\n  }\r\n\r\n  static gitUserRole(rool){\r\n    let roles = {\r\n      0: \"رئيس الجامعة\",\r\n      1: \"نائب إداري\",\r\n      2: \"شؤون الموظفين\",\r\n      3: \"مدير الدائرة الإدارية\",\r\n      4: \"موظف\",\r\n    };\r\n    if(rool == 0){\r\n      return roles[0];\r\n    }\r\n    \r\n    else if(rool == 1){\r\n      return roles[1];\r\n    }\r\n\r\n    else if(this.getCurrentUser.role == 2){\r\n      return roles[2];\r\n    }\r\n\r\n    else if(this.getCurrentUser.role == 3){\r\n      return roles[3];\r\n    }\r\n\r\n    else if(this.getCurrentUser.role == 4){\r\n      return roles[4];\r\n    }\r\n  }\r\n\r\n  static getNotificationsSeen() {\r\n    return JSON.parse(localStorage.getItem(\"notificationsSeen\"));\r\n  }\r\n  static getCurrentUserId() {\r\n    return JSON.parse(localStorage.getItem(\"currentUserId\"));\r\n  }\r\n\r\n  static getNameforRequestId() {\r\n    return this.getUserWithId(this.getRequestArray().userId).name;\r\n  }\r\n\r\n  static setCurrentUserId(userId) {\r\n    localStorage.setItem(\"currentUserId\", JSON.stringify(userId));\r\n  }\r\n\r\n  static getAllUsersWithoutCurrentId(userId) {\r\n    return this.getRequestArray().filter((request) => request.userId != userId);\r\n  }\r\n\r\n  static getCurrentUser() {\r\n    return Database.getUserWithId(\r\n      JSON.parse(localStorage.getItem(\"currentUserId\"))\r\n    );\r\n  }\r\n\r\n  static getUsersArray() {\r\n    return JSON.parse(localStorage.getItem(\"userTable\"));\r\n  }\r\n\r\n  static getUserWithId(userId) {\r\n    return Database.getUsersArray().find((user) => user.userId === userId);\r\n  }\r\n\r\n  static getRequestArray() {\r\n    return JSON.parse(localStorage.getItem(\"requestTable\"));\r\n  }\r\n\r\n  static getRequestArrayToShowForUserId(userId) {\r\n    let requests = Database.getRequestArray();\r\n    requests = requests.filter((request) => {\r\n      return this.isShowUserIdRequest(userId, request.requestId);\r\n    });\r\n    return requests;\r\n  }\r\n\r\n  static addNotificationSeen(userId, requestId) {\r\n    let notificationsSeen = Database.getNotificationsSeen();\r\n    if (!Database.IsSeenNotification(userId, requestId)) {\r\n      notificationsSeen.push({ userId: userId, requestId: requestId });\r\n      localStorage.setItem(\r\n        \"notificationsSeen\",\r\n        JSON.stringify(notificationsSeen)\r\n      );\r\n    }\r\n  }\r\n  static getNotificationMessageUserIdRequest(userId, requestId) {\r\n    if (Database.IsSeenNotification(userId, requestId)) {\r\n      return \"مقروء\";\r\n    } else {\r\n      return \"غير مقروء\";\r\n    }\r\n  }\r\n  static IsSeenNotification(userId, requestId) {\r\n    const notificationsSeenArray = Database.getNotificationsSeen();\r\n    let seen = false;\r\n    notificationsSeenArray.forEach((notificationSeen) => {\r\n      if (\r\n        notificationSeen.userId == userId &&\r\n        notificationSeen.requestId == requestId\r\n      ) {\r\n        seen = true;\r\n      }\r\n    });\r\n    return seen;\r\n  }\r\n  static getNotificationCountForUserId(userId) {\r\n    let requests = Database.getRequestArray();\r\n    let count = 0;\r\n    requests.map((request) => {\r\n      if (\r\n        Database.isShowAsNotificationUserIdRequest(userId, request.requestId) &&\r\n        !Database.IsSeenNotification(userId, request.requestId)\r\n      ) {\r\n        count += 1;\r\n      }\r\n    });\r\n    return count;\r\n  }\r\n  static getRequestArrayToShowAsNotificationForUserId(userId) {\r\n    let requests = Database.getRequestArray();\r\n    requests = requests.filter((request) => {\r\n      return this.isShowAsNotificationUserIdRequest(userId, request.requestId);\r\n    });\r\n    return requests;\r\n  }\r\n  static getRequestArrayWithUserId(userId) {\r\n    return Database.getRequestArray().filter(\r\n      (request) => request.userId === userId\r\n    );\r\n  }\r\n\r\n  static getRequestWithId(requestId) {\r\n    return Database.getRequestArray().filter(\r\n      (request) => request.requestId === requestId\r\n    )[0];\r\n  }\r\n\r\n  static getCurrentUserRole() {\r\n    return Database.getCurrentUser().role;\r\n  }\r\n\r\n  static addRequest(request) {\r\n    const requestTableFromLocalStorage = Database.getRequestArray();\r\n    requestTableFromLocalStorage.push(request);\r\n    localStorage.setItem(\r\n      \"requestTable\",\r\n      JSON.stringify(requestTableFromLocalStorage)\r\n    );\r\n  }\r\n  static isActionTaken(requestId) {\r\n    let request = Database.getRequestWithId(requestId);\r\n    return (\r\n      request.status == Status.Accepted || request.status == Status.Rejected\r\n    );\r\n  }\r\n  static isRequestRejected(requestId) {\r\n    let request = Database.getRequestWithId(requestId);\r\n    return request.status == Status.Rejected;\r\n  }\r\n\r\n  static rejectRequest(requestId, rejectReason) {\r\n    const requests = Database.getRequestArray();\r\n    requests.filter((request) => {\r\n      if (request.requestId == requestId) {\r\n        request.status = Status.Rejected;\r\n        request.rejectReason = rejectReason;\r\n      }\r\n    });\r\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\r\n  }\r\n  static acceptRequest(requestId) {\r\n    const requests = Database.getRequestArray();\r\n    const flow = Database.getFlowForRequestId(requestId);\r\n    requests.filter((request) => {\r\n      if (request.requestId == requestId) {\r\n        if (request.step == flow.length - 1) {\r\n          request.status = Status.Accepted;\r\n        } else {\r\n          request.status = Status.NotSeen;\r\n          request.step += 1;\r\n        }\r\n      }\r\n    });\r\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\r\n  }\r\n  static makeRequestSeen(requestId) {\r\n    const requests = Database.getRequestArray();\r\n    requests.filter((request) => {\r\n      if (request.requestId == requestId) {\r\n        request.status = Status.Seen;\r\n      }\r\n    });\r\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\r\n  }\r\n  static getUniqueId() {\r\n    return Database.getRequestArray().length;\r\n  }\r\n}\r\n\r\nexport default Database;\r\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,MAAMC,QAAQ,CAAC;EAEb,OAAOC,OAAOA,CAAA,EAAG;IACf,OAAOC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC;EACzD;EACA,OAAOC,mBAAmBA,CAACC,SAAS,EAAE;IACpC,MAAMC,WAAW,GAAGR,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC,CAACC,WAAW;IACpE,MAAME,YAAY,GAAGV,QAAQ,CAACC,OAAO,EAAE;IACvC,OAAOS,YAAY,CAACF,WAAW,CAAC;EAClC;EACA,OAAOG,aAAaA,CAACC,MAAM,EAAEL,SAAS,EAAE;IACtC,MAAMM,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC;IACpD,OAAQM,OAAO,CAACD,MAAM,GAAGA,MAAM;EACjC;EACA,OAAOE,aAAaA,CAACC,IAAI,EAAE;IACzB,OAAOA,IAAI,IAAI,CAAC;EAClB;EACA,OAAOC,oBAAoBA,CAAA,EAAG;IAC5B,MAAMC,IAAI,GAAGjB,QAAQ,CAACkB,cAAc,EAAE;IACtC,OAAOD,IAAI,CAACF,IAAI,IAAI,CAAC;EACvB;EACA,OAAOI,gCAAgCA,CAACP,MAAM,EAAEL,SAAS,EAAE;IACzD,MAAMa,IAAI,GAAGpB,QAAQ,CAACM,mBAAmB,CAACC,SAAS,CAAC;IACpD,MAAMM,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC;IACpD,MAAMU,IAAI,GAAGjB,QAAQ,CAACqB,aAAa,CAACT,MAAM,CAAC;IAC3C,MAAMU,KAAK,GAAGF,IAAI,CAACG,OAAO,CAACN,IAAI,CAACF,IAAI,CAAC;IACrC,IAAIO,KAAK,IAAIT,OAAO,CAACW,IAAI,EAAE,OAAO,KAAK;IACvC,OACEX,OAAO,CAACY,MAAM,IAAI1B,MAAM,CAAC2B,QAAQ,IAAIb,OAAO,CAACY,MAAM,IAAI1B,MAAM,CAAC4B,QAAQ;EAE1E;EACA,OAAOC,oBAAoBA,CAACb,IAAI,EAAER,SAAS,EAAE;IAC3CsB,OAAO,CAACC,GAAG,CAACf,IAAI,CAAC;IACjBc,OAAO,CAACC,GAAG,CAACvB,SAAS,CAAC;IACtB,OAAO,CAAC;EACV;EACA,OAAOwB,mBAAmBA,CAACnB,MAAM,EAAEL,SAAS,EAAE;IAC5C,MAAMU,IAAI,GAAGjB,QAAQ,CAACqB,aAAa,CAACT,MAAM,CAAC;IAC3C,MAAMQ,IAAI,GAAGpB,QAAQ,CAACM,mBAAmB,CAACC,SAAS,CAAC;IACpD,MAAMM,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC;IACpD,MAAMe,KAAK,GAAGF,IAAI,CAACG,OAAO,CAACN,IAAI,CAACF,IAAI,CAAC;IACrC,IAAIO,KAAK,IAAI,CAAC,CAAC,EAAE;MACf,OAAOT,OAAO,CAACD,MAAM,IAAIA,MAAM;IACjC;IACA,IAAIU,KAAK,IAAIT,OAAO,CAACW,IAAI,EAAE,OAAO,IAAI;IACtC,OAAO,KAAK;EACd;EACA,OAAOQ,iCAAiCA,CAACpB,MAAM,EAAEL,SAAS,EAAE;IAC1D,MAAMU,IAAI,GAAGjB,QAAQ,CAACqB,aAAa,CAACT,MAAM,CAAC;IAC3C,MAAMQ,IAAI,GAAGpB,QAAQ,CAACM,mBAAmB,CAACC,SAAS,CAAC;IACpD,MAAMM,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC;IACpD,MAAMe,KAAK,GAAGF,IAAI,CAACG,OAAO,CAACN,IAAI,CAACF,IAAI,CAAC;IACrC,IAAIO,KAAK,IAAI,CAAC,CAAC,EAAE;MACf,OAAOT,OAAO,CAACD,MAAM,IAAIA,MAAM;IACjC;IACA,IAAIU,KAAK,IAAIT,OAAO,CAACW,IAAI,EAAE,OAAO,KAAK;IACvC,IAAIX,OAAO,CAACY,MAAM,IAAI1B,MAAM,CAAC4B,QAAQ,EAAE,OAAO,IAAI;IAClD,OAAO,KAAK;EACd;EACA,OAAOM,uBAAuBA,CAAClB,IAAI,EAAER,SAAS,EAAE;IAC9C,MAAMa,IAAI,GAAGpB,QAAQ,CAACM,mBAAmB,CAACC,SAAS,CAAC;IACpD,MAAMM,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC;IACpD,MAAMe,KAAK,GAAGF,IAAI,CAACG,OAAO,CAACR,IAAI,CAAC;IAChC,IAAIO,KAAK,IAAI,CAAC,CAAC,EAAE;MACf;MACA,OAAOT,OAAO,CAACY,MAAM;IACvB,CAAC,MAAM,IAAIH,KAAK,GAAGT,OAAO,CAACW,IAAI,EAAE;MAC/B,OAAOzB,MAAM,CAAC2B,QAAQ;IACxB,CAAC,MAAM,IAAIJ,KAAK,IAAIT,OAAO,CAACW,IAAI,EAAE;MAChC,OAAOX,OAAO,CAACY,MAAM;IACvB;EACF;EAEA,OAAOS,QAAQA,CAAA,EAAG;IAChB,OAAOhC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EAClD;EACA,OAAO8B,uBAAuBA,CAAC5B,SAAS,EAAE;IACxC,MAAM6B,KAAK,GAAGpC,QAAQ,CAACkC,QAAQ,EAAE;IACjC,MAAMrB,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC;IACpD,MAAMa,IAAI,GAAGpB,QAAQ,CAACM,mBAAmB,CAACC,SAAS,CAAC;IACpD,OAAO6B,KAAK,CAAChB,IAAI,CAACP,OAAO,CAACW,IAAI,CAAC,CAAC;EAClC;EACA,OAAOa,qBAAqBA,CAACzB,MAAM,EAAEL,SAAS,EAAE;IAC9C,MAAMU,IAAI,GAAGjB,QAAQ,CAACqB,aAAa,CAACT,MAAM,CAAC;IAC3C,MAAMC,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC;IACpD,MAAMa,IAAI,GAAGpB,QAAQ,CAACM,mBAAmB,CAACC,SAAS,CAAC;IACpD,OAAOa,IAAI,CAACP,OAAO,CAACW,IAAI,CAAC,IAAIP,IAAI,CAACF,IAAI;EACxC;EACA,OAAOuB,gCAAgCA,CAAC1B,MAAM,EAAEL,SAAS,EAAE;IACzD,MAAMU,IAAI,GAAG,IAAI,CAACI,aAAa,CAACT,MAAM,CAAC;IACvC,MAAMa,MAAM,GAAG,IAAI,CAACQ,uBAAuB,CAAChB,IAAI,CAACF,IAAI,EAAER,SAAS,CAAC;IACjE,MAAMM,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC;IACpD,MAAMa,IAAI,GAAGpB,QAAQ,CAACM,mBAAmB,CAACC,SAAS,CAAC;IACpD,IAAIM,OAAO,CAACD,MAAM,IAAIA,MAAM,EAAE;MAC5B;MACA,IACEC,OAAO,CAACW,IAAI,IAAIJ,IAAI,CAACmB,MAAM,GAAG,CAAC,KAC9B1B,OAAO,CAACY,MAAM,IAAI1B,MAAM,CAAC2B,QAAQ,IAAIb,OAAO,CAACY,MAAM,IAAI1B,MAAM,CAAC4B,QAAQ,CAAC,EACxE;QACA,OAAO5B,MAAM,CAAC0B,MAAM,CAAC,CAACe,eAAe,CAACC,QAAQ,EAAE;MAClD,CAAC,MAAM;QACL,OACE1C,MAAM,CAAC0B,MAAM,CAAC,CAACe,eAAe,CAACC,QAAQ,EAAE,GACzC,OAAO,GACPzC,QAAQ,CAACmC,uBAAuB,CAAC5B,SAAS,CAAC,CAC3C,CAAC;MACL;IACF,CAAC,MAAM;MACL,OAAOR,MAAM,CAAC0B,MAAM,CAAC,CAACiB,cAAc;IACtC;EACF;EACA,OAAOC,YAAYA,CAAA,EAAG;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAIR,KAAK,GAAG;MACV,CAAC,EAAE,cAAc;MACjB,CAAC,EAAE,YAAY;MACf,CAAC,EAAE,eAAe;MAClB,CAAC,EAAE,uBAAuB;MAC1B,CAAC,EAAE;IACL,CAAC;IACD,IAAI1B,YAAY,GAAG;MACjB,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACf,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACZ,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACT,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACb,CAAC;IACD,IAAImC,aAAa,GAAG,EAAE;IACtB,IAAIC,SAAS,GAAG,CACd;MACElC,MAAM,EAAE,CAAC;MACTmC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE,GAAG;MACblC,IAAI,EAAE,CAAC;MACPmC,KAAK,EAAE,iBAAiB;MACxBC,WAAW,EAAE,YAAY;MACzBC,UAAU,EAAE;IACd,CAAC,EACD;MACExC,MAAM,EAAE,CAAC;MACTmC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE,GAAG;MACblC,IAAI,EAAE,CAAC;MACPmC,KAAK,EAAE,iBAAiB;MACxBC,WAAW,EAAE,YAAY;MACzBC,UAAU,EAAE;IACd,CAAC,EACD;MACExC,MAAM,EAAE,CAAC;MACTmC,IAAI,EAAE,cAAc;MACpBC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE,GAAG;MACblC,IAAI,EAAE,CAAC;MACPmC,KAAK,EAAE,mBAAmB;MAC1BC,WAAW,EAAE,YAAY;MACzBC,UAAU,EAAE;IACd,CAAC,EACD;MACExC,MAAM,EAAE,CAAC;MACTmC,IAAI,EAAE,UAAU;MAChBC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE,GAAG;MACblC,IAAI,EAAE,CAAC;MACPmC,KAAK,EAAE,gBAAgB;MACvBC,WAAW,EAAE,YAAY;MACzBC,UAAU,EAAE;IACd,CAAC,EACD;MACExC,MAAM,EAAE,CAAC;MACTmC,IAAI,EAAE,WAAW;MACjBC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE,GAAG;MACblC,IAAI,EAAE,CAAC;MACPmC,KAAK,EAAE,gBAAgB;MACvBC,WAAW,EAAE,YAAY;MACzBC,UAAU,EAAE;IACd,CAAC,CACF;IAEDhD,YAAY,CAACiD,OAAO,CAAC,WAAW,EAAEnD,IAAI,CAACoD,SAAS,CAACR,SAAS,CAAC,CAAC;IAC5D1C,YAAY,CAACiD,OAAO,CAAC,cAAc,EAAEnD,IAAI,CAACoD,SAAS,CAACV,YAAY,CAAC,CAAC;IAClExC,YAAY,CAACiD,OAAO,CAAC,cAAc,EAAEnD,IAAI,CAACoD,SAAS,CAAC5C,YAAY,CAAC,CAAC;IAClEN,YAAY,CAACiD,OAAO,CAAC,OAAO,EAAEnD,IAAI,CAACoD,SAAS,CAAClB,KAAK,CAAC,CAAC;IACpDhC,YAAY,CAACiD,OAAO,CAAC,mBAAmB,EAAEnD,IAAI,CAACoD,SAAS,CAACT,aAAa,CAAC,CAAC;IAExE,IAAIU,KAAK,GAAGrD,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;IACzD,IAAImD,QAAQ,GAAGtD,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC;IAE/DD,YAAY,CAACiD,OAAO,CAAC,WAAW,EAAEnD,IAAI,CAACoD,SAAS,CAACC,KAAK,CAAC,CAAC;IACxDnD,YAAY,CAACiD,OAAO,CAAC,cAAc,EAAEnD,IAAI,CAACoD,SAAS,CAACE,QAAQ,CAAC,CAAC;EAChE;EAEA,OAAOC,WAAWA,CAACC,IAAI,EAAC;IACtB,IAAItB,KAAK,GAAG;MACV,CAAC,EAAE,cAAc;MACjB,CAAC,EAAE,YAAY;MACf,CAAC,EAAE,eAAe;MAClB,CAAC,EAAE,uBAAuB;MAC1B,CAAC,EAAE;IACL,CAAC;IACD,IAAGsB,IAAI,IAAI,CAAC,EAAC;MACX,OAAOtB,KAAK,CAAC,CAAC,CAAC;IACjB,CAAC,MAEI,IAAGsB,IAAI,IAAI,CAAC,EAAC;MAChB,OAAOtB,KAAK,CAAC,CAAC,CAAC;IACjB,CAAC,MAEI,IAAG,IAAI,CAAClB,cAAc,CAACH,IAAI,IAAI,CAAC,EAAC;MACpC,OAAOqB,KAAK,CAAC,CAAC,CAAC;IACjB,CAAC,MAEI,IAAG,IAAI,CAAClB,cAAc,CAACH,IAAI,IAAI,CAAC,EAAC;MACpC,OAAOqB,KAAK,CAAC,CAAC,CAAC;IACjB,CAAC,MAEI,IAAG,IAAI,CAAClB,cAAc,CAACH,IAAI,IAAI,CAAC,EAAC;MACpC,OAAOqB,KAAK,CAAC,CAAC,CAAC;IACjB;EACF;EAEA,OAAOuB,oBAAoBA,CAAA,EAAG;IAC5B,OAAOzD,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,CAAC;EAC9D;EACA,OAAOuD,gBAAgBA,CAAA,EAAG;IACxB,OAAO1D,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC;EAC1D;EAEA,OAAOwD,mBAAmBA,CAAA,EAAG;IAC3B,OAAO,IAAI,CAACxC,aAAa,CAAC,IAAI,CAACyC,eAAe,EAAE,CAAClD,MAAM,CAAC,CAACmC,IAAI;EAC/D;EAEA,OAAOgB,gBAAgBA,CAACnD,MAAM,EAAE;IAC9BR,YAAY,CAACiD,OAAO,CAAC,eAAe,EAAEnD,IAAI,CAACoD,SAAS,CAAC1C,MAAM,CAAC,CAAC;EAC/D;EAEA,OAAOoD,2BAA2BA,CAACpD,MAAM,EAAE;IACzC,OAAO,IAAI,CAACkD,eAAe,EAAE,CAACG,MAAM,CAAEpD,OAAO,IAAKA,OAAO,CAACD,MAAM,IAAIA,MAAM,CAAC;EAC7E;EAEA,OAAOM,cAAcA,CAAA,EAAG;IACtB,OAAOlB,QAAQ,CAACqB,aAAa,CAC3BnB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC,CAClD;EACH;EAEA,OAAO6D,aAAaA,CAAA,EAAG;IACrB,OAAOhE,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;EACtD;EAEA,OAAOgB,aAAaA,CAACT,MAAM,EAAE;IAC3B,OAAOZ,QAAQ,CAACkE,aAAa,EAAE,CAACC,IAAI,CAAElD,IAAI,IAAKA,IAAI,CAACL,MAAM,KAAKA,MAAM,CAAC;EACxE;EAEA,OAAOkD,eAAeA,CAAA,EAAG;IACvB,OAAO5D,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC;EACzD;EAEA,OAAO+D,8BAA8BA,CAACxD,MAAM,EAAE;IAC5C,IAAI4C,QAAQ,GAAGxD,QAAQ,CAAC8D,eAAe,EAAE;IACzCN,QAAQ,GAAGA,QAAQ,CAACS,MAAM,CAAEpD,OAAO,IAAK;MACtC,OAAO,IAAI,CAACkB,mBAAmB,CAACnB,MAAM,EAAEC,OAAO,CAACN,SAAS,CAAC;IAC5D,CAAC,CAAC;IACF,OAAOiD,QAAQ;EACjB;EAEA,OAAOa,mBAAmBA,CAACzD,MAAM,EAAEL,SAAS,EAAE;IAC5C,IAAI+D,iBAAiB,GAAGtE,QAAQ,CAAC2D,oBAAoB,EAAE;IACvD,IAAI,CAAC3D,QAAQ,CAACuE,kBAAkB,CAAC3D,MAAM,EAAEL,SAAS,CAAC,EAAE;MACnD+D,iBAAiB,CAACE,IAAI,CAAC;QAAE5D,MAAM,EAAEA,MAAM;QAAEL,SAAS,EAAEA;MAAU,CAAC,CAAC;MAChEH,YAAY,CAACiD,OAAO,CAClB,mBAAmB,EACnBnD,IAAI,CAACoD,SAAS,CAACgB,iBAAiB,CAAC,CAClC;IACH;EACF;EACA,OAAOG,mCAAmCA,CAAC7D,MAAM,EAAEL,SAAS,EAAE;IAC5D,IAAIP,QAAQ,CAACuE,kBAAkB,CAAC3D,MAAM,EAAEL,SAAS,CAAC,EAAE;MAClD,OAAO,OAAO;IAChB,CAAC,MAAM;MACL,OAAO,WAAW;IACpB;EACF;EACA,OAAOgE,kBAAkBA,CAAC3D,MAAM,EAAEL,SAAS,EAAE;IAC3C,MAAMmE,sBAAsB,GAAG1E,QAAQ,CAAC2D,oBAAoB,EAAE;IAC9D,IAAIgB,IAAI,GAAG,KAAK;IAChBD,sBAAsB,CAACE,OAAO,CAAEC,gBAAgB,IAAK;MACnD,IACEA,gBAAgB,CAACjE,MAAM,IAAIA,MAAM,IACjCiE,gBAAgB,CAACtE,SAAS,IAAIA,SAAS,EACvC;QACAoE,IAAI,GAAG,IAAI;MACb;IACF,CAAC,CAAC;IACF,OAAOA,IAAI;EACb;EACA,OAAOG,6BAA6BA,CAAClE,MAAM,EAAE;IAC3C,IAAI4C,QAAQ,GAAGxD,QAAQ,CAAC8D,eAAe,EAAE;IACzC,IAAIiB,KAAK,GAAG,CAAC;IACbvB,QAAQ,CAACwB,GAAG,CAAEnE,OAAO,IAAK;MACxB,IACEb,QAAQ,CAACgC,iCAAiC,CAACpB,MAAM,EAAEC,OAAO,CAACN,SAAS,CAAC,IACrE,CAACP,QAAQ,CAACuE,kBAAkB,CAAC3D,MAAM,EAAEC,OAAO,CAACN,SAAS,CAAC,EACvD;QACAwE,KAAK,IAAI,CAAC;MACZ;IACF,CAAC,CAAC;IACF,OAAOA,KAAK;EACd;EACA,OAAOE,4CAA4CA,CAACrE,MAAM,EAAE;IAC1D,IAAI4C,QAAQ,GAAGxD,QAAQ,CAAC8D,eAAe,EAAE;IACzCN,QAAQ,GAAGA,QAAQ,CAACS,MAAM,CAAEpD,OAAO,IAAK;MACtC,OAAO,IAAI,CAACmB,iCAAiC,CAACpB,MAAM,EAAEC,OAAO,CAACN,SAAS,CAAC;IAC1E,CAAC,CAAC;IACF,OAAOiD,QAAQ;EACjB;EACA,OAAO0B,yBAAyBA,CAACtE,MAAM,EAAE;IACvC,OAAOZ,QAAQ,CAAC8D,eAAe,EAAE,CAACG,MAAM,CACrCpD,OAAO,IAAKA,OAAO,CAACD,MAAM,KAAKA,MAAM,CACvC;EACH;EAEA,OAAOH,gBAAgBA,CAACF,SAAS,EAAE;IACjC,OAAOP,QAAQ,CAAC8D,eAAe,EAAE,CAACG,MAAM,CACrCpD,OAAO,IAAKA,OAAO,CAACN,SAAS,KAAKA,SAAS,CAC7C,CAAC,CAAC,CAAC;EACN;EAEA,OAAO4E,kBAAkBA,CAAA,EAAG;IAC1B,OAAOnF,QAAQ,CAACkB,cAAc,EAAE,CAACH,IAAI;EACvC;EAEA,OAAOqE,UAAUA,CAACvE,OAAO,EAAE;IACzB,MAAMwE,4BAA4B,GAAGrF,QAAQ,CAAC8D,eAAe,EAAE;IAC/DuB,4BAA4B,CAACb,IAAI,CAAC3D,OAAO,CAAC;IAC1CT,YAAY,CAACiD,OAAO,CAClB,cAAc,EACdnD,IAAI,CAACoD,SAAS,CAAC+B,4BAA4B,CAAC,CAC7C;EACH;EACA,OAAOC,aAAaA,CAAC/E,SAAS,EAAE;IAC9B,IAAIM,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC;IAClD,OACEM,OAAO,CAACY,MAAM,IAAI1B,MAAM,CAAC2B,QAAQ,IAAIb,OAAO,CAACY,MAAM,IAAI1B,MAAM,CAAC4B,QAAQ;EAE1E;EACA,OAAO4D,iBAAiBA,CAAChF,SAAS,EAAE;IAClC,IAAIM,OAAO,GAAGb,QAAQ,CAACS,gBAAgB,CAACF,SAAS,CAAC;IAClD,OAAOM,OAAO,CAACY,MAAM,IAAI1B,MAAM,CAAC4B,QAAQ;EAC1C;EAEA,OAAO6D,aAAaA,CAACjF,SAAS,EAAEkF,YAAY,EAAE;IAC5C,MAAMjC,QAAQ,GAAGxD,QAAQ,CAAC8D,eAAe,EAAE;IAC3CN,QAAQ,CAACS,MAAM,CAAEpD,OAAO,IAAK;MAC3B,IAAIA,OAAO,CAACN,SAAS,IAAIA,SAAS,EAAE;QAClCM,OAAO,CAACY,MAAM,GAAG1B,MAAM,CAAC4B,QAAQ;QAChCd,OAAO,CAAC4E,YAAY,GAAGA,YAAY;MACrC;IACF,CAAC,CAAC;IACFrF,YAAY,CAACiD,OAAO,CAAC,cAAc,EAAEnD,IAAI,CAACoD,SAAS,CAACE,QAAQ,CAAC,CAAC;EAChE;EACA,OAAOkC,aAAaA,CAACnF,SAAS,EAAE;IAC9B,MAAMiD,QAAQ,GAAGxD,QAAQ,CAAC8D,eAAe,EAAE;IAC3C,MAAM1C,IAAI,GAAGpB,QAAQ,CAACM,mBAAmB,CAACC,SAAS,CAAC;IACpDiD,QAAQ,CAACS,MAAM,CAAEpD,OAAO,IAAK;MAC3B,IAAIA,OAAO,CAACN,SAAS,IAAIA,SAAS,EAAE;QAClC,IAAIM,OAAO,CAACW,IAAI,IAAIJ,IAAI,CAACmB,MAAM,GAAG,CAAC,EAAE;UACnC1B,OAAO,CAACY,MAAM,GAAG1B,MAAM,CAAC2B,QAAQ;QAClC,CAAC,MAAM;UACLb,OAAO,CAACY,MAAM,GAAG1B,MAAM,CAAC4F,OAAO;UAC/B9E,OAAO,CAACW,IAAI,IAAI,CAAC;QACnB;MACF;IACF,CAAC,CAAC;IACFpB,YAAY,CAACiD,OAAO,CAAC,cAAc,EAAEnD,IAAI,CAACoD,SAAS,CAACE,QAAQ,CAAC,CAAC;EAChE;EACA,OAAOoC,eAAeA,CAACrF,SAAS,EAAE;IAChC,MAAMiD,QAAQ,GAAGxD,QAAQ,CAAC8D,eAAe,EAAE;IAC3CN,QAAQ,CAACS,MAAM,CAAEpD,OAAO,IAAK;MAC3B,IAAIA,OAAO,CAACN,SAAS,IAAIA,SAAS,EAAE;QAClCM,OAAO,CAACY,MAAM,GAAG1B,MAAM,CAAC8F,IAAI;MAC9B;IACF,CAAC,CAAC;IACFzF,YAAY,CAACiD,OAAO,CAAC,cAAc,EAAEnD,IAAI,CAACoD,SAAS,CAACE,QAAQ,CAAC,CAAC;EAChE;EACA,OAAOsC,WAAWA,CAAA,EAAG;IACnB,OAAO9F,QAAQ,CAAC8D,eAAe,EAAE,CAACvB,MAAM;EAC1C;AACF;AAACwD,eAAA,CArYK/F,QAAQ,mBACW,IAAI;AAsY7B,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}