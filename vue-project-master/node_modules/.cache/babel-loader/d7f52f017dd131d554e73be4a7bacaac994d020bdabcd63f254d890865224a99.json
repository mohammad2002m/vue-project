{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, vModelDynamic as _vModelDynamic, normalizeClass as _normalizeClass, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, renderList as _renderList, Fragment as _Fragment, vModelSelect as _vModelSelect, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-41bbc2ba\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"col-md\"\n};\nconst _hoisted_2 = {\n  for: \"\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  style: {\n    \"color\": \"red\"\n  }\n}, \"*\", -1 /* HOISTED */));\nconst _hoisted_4 = [\"type\", \"placeholder\", \"disabled\"];\nconst _hoisted_5 = [\"placeholder\", \"disabled\"];\nconst _hoisted_6 = [\"disabled\"];\nconst _hoisted_7 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"\\r\\n        :value=\\\"inputType == 'date' ? '2023-01-01' : ''\\\"\\r\\n      \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"label\", _hoisted_2, [_createTextVNode(_toDisplayString($props.title) + \" \", 1 /* TEXT */), _hoisted_3]), $props.inputType == 'text' || $props.inputType == 'number' || $props.inputType == 'date' ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 0,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userInput = $event),\n    type: $props.inputType,\n    class: _normalizeClass($data.inputStyle),\n    placeholder: $props.title,\n    disabled: $props.isReadOnly\n  }, null, 10 /* CLASS, PROPS */, _hoisted_4)), [[_vModelDynamic, $data.userInput]]) : $props.inputType == 'textarea' ? _withDirectives((_openBlock(), _createElementBlock(\"textarea\", {\n    key: 1,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.userInput = $event),\n    type: \"text\",\n    class: _normalizeClass($data.inputStyle),\n    placeholder: $props.title,\n    rows: \"8\",\n    disabled: $props.isReadOnly\n  }, null, 10 /* CLASS, PROPS */, _hoisted_5)), [[_vModelText, $data.userInput]]) : $props.inputType == 'select' ? _withDirectives((_openBlock(), _createElementBlock(\"select\", {\n    key: 2,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.userInput = $event),\n    class: _normalizeClass($data.inputStyle),\n    disabled: $props.isReadOnly\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.optionsList, (option, index) => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: index,\n      value: option\n    }, _toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */))], 10 /* CLASS, PROPS */, _hoisted_6)), [[_vModelSelect, $data.userInput]]) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"label\", {\n    class: _normalizeClass($data.msgStyle),\n    for: \"\"\n  }, _toDisplayString($data.validMsg), 3 /* TEXT, CLASS */)])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["class","for","_createElementVNode","style","_createCommentVNode","_hoisted_1","_hoisted_2","$props","title","_hoisted_3","inputType","_createElementBlock","$data","userInput","$event","type","_normalizeClass","inputStyle","placeholder","disabled","isReadOnly","rows","_Fragment","_renderList","optionsList","option","index","key","value","_hoisted_7","msgStyle","validMsg"],"sources":["D:\\Vue\\vue-project-last\\src\\components\\RequestForm\\FormInputComponent.vue"],"sourcesContent":["<template>\r\n      <!--\r\n        :value=\"inputType == 'date' ? '2023-01-01' : ''\"\r\n      -->\r\n      <div class=\"col-md\">\r\n        <label for=\"\"> {{ title }} <span style=\"color:red;\">*</span> </label>\r\n        <input v-if=\"inputType == 'text' || inputType == 'number' || inputType == 'date'\" v-model=\"userInput\" :type=\"inputType\" :class=\"inputStyle\" :placeholder=\"title\"  :disabled=\"isReadOnly\"/>\r\n        <textarea v-else-if=\"inputType == 'textarea'\" v-model=\"userInput\" type=\"text\" :class=\"inputStyle\" :placeholder=\"title\" rows=\"8\"  :disabled=\"isReadOnly\"></textarea>\r\n        <select v-else-if=\"inputType == 'select'\" v-model=\"userInput\" :class=\"inputStyle\" :disabled=\"isReadOnly\">\r\n          <option  v-for=\"(option, index) in optionsList\" :key=\"index\" :value=\"option\"> {{ option }} </option>\r\n        </select>\r\n        <label :class=\"msgStyle\" for=\"\"> {{ validMsg }} </label>\r\n      </div>\r\n</template>\r\n\r\n<script>\r\nimport moment from 'moment';\r\nexport default {\r\n  name: 'FormInputComponent',\r\n  props: {\r\n    inputType: String,\r\n    placeholder: String,\r\n    title: String,\r\n    optionsList: Array,\r\n    isReadOnly: Boolean\r\n  },\r\n  data() {\r\n    return {\r\n      userInput: this.InitialInputValue(),\r\n      validMsg: '',\r\n      inputStyle: 'form-control',\r\n      msgStyle: ''\r\n    }\r\n  },\r\n  methods: {\r\n    InitialInputValue(){\r\n      if (this.inputType == 'select'){\r\n        return this.optionsList[0];\r\n      } else if (this.inputType == 'date'){\r\n        return moment(new Date()).format('YYYY-MM-DD');\r\n      } else {\r\n        return '';\r\n      }\r\n    },\r\n  }\r\n  \r\n}\r\n</script>\r\n\r\n<style scoped>\r\n  label {\r\n    margin-right: 5px;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  div {\r\n    margin-bottom: 3rem;\r\n    direction: rtl;\r\n  }\r\n  select {\r\n    background-position: left 0.75rem center;\r\n    padding-right: 0.57rem;\r\n  }\r\n  select:not(:focus) {\r\n    color: #595c5f;\r\n  }\r\n\r\n  input {\r\n    margin-bottom: 5px;\r\n  }\r\n\r\n  .msgValid {\r\n    color:rgb(40,167,69);\r\n  }\r\n  .msgInvalid {\r\n    color: rgb(220,53,69);\r\n  }\r\n\r\n</style>"],"mappings":";;;EAIWA,KAAK,EAAC;AAAQ;;EACVC,GAAG,EAAC;AAAE;gEAAcC,mBAAA,CAAiC;EAA3BC,KAAkB,EAAlB;IAAA;EAAA;AAAkB,GAAC,GAAC;;;;;;6DAJvDC,mBAAA,4EAEG,EACHF,mBAAA,CAQM,OARNG,UAQM,GAPJH,mBAAA,CAAqE,SAArEI,UAAqE,G,kCAAnDC,MAAA,CAAAC,KAAK,IAAG,GAAC,iBAAAC,UAAiC,C,GAC/CF,MAAA,CAAAG,SAAS,cAAcH,MAAA,CAAAG,SAAS,gBAAgBH,MAAA,CAAAG,SAAS,a,+BAAtEC,mBAAA,CAA0L;;+DAA/FC,KAAA,CAAAC,SAAS,GAAAC,MAAA;IAAGC,IAAI,EAAER,MAAA,CAAAG,SAAS;IAAGV,KAAK,EAAAgB,eAAA,CAAEJ,KAAA,CAAAK,UAAU;IAAGC,WAAW,EAAEX,MAAA,CAAAC,KAAK;IAAIW,QAAQ,EAAEZ,MAAA,CAAAa;kEAAlFR,KAAA,CAAAC,SAAS,E,IAC/EN,MAAA,CAAAG,SAAS,iB,+BAA9BC,mBAAA,CAAmK;;+DAA5GC,KAAA,CAAAC,SAAS,GAAAC,MAAA;IAAEC,IAAI,EAAC,MAAM;IAAEf,KAAK,EAAAgB,eAAA,CAAEJ,KAAA,CAAAK,UAAU;IAAGC,WAAW,EAAEX,MAAA,CAAAC,KAAK;IAAEa,IAAI,EAAC,GAAG;IAAGF,QAAQ,EAAEZ,MAAA,CAAAa;+DAArFR,KAAA,CAAAC,SAAS,E,IAC7CN,MAAA,CAAAG,SAAS,e,+BAA5BC,mBAAA,CAES;;+DAF0CC,KAAA,CAAAC,SAAS,GAAAC,MAAA;IAAGd,KAAK,EAAAgB,eAAA,CAAEJ,KAAA,CAAAK,UAAU;IAAGE,QAAQ,EAAEZ,MAAA,CAAAa;yBAC3FT,mBAAA,CAAoGW,SAAA,QAAAC,WAAA,CAAjEhB,MAAA,CAAAiB,WAAW,GAA7BC,MAAM,EAAEC,KAAK;yBAA9Bf,mBAAA,CAAoG;MAAnDgB,GAAG,EAAED,KAAK;MAAGE,KAAK,EAAEH;wBAAYA,MAAM,wBAAAI,UAAA;yFADtCjB,KAAA,CAAAC,SAAS,E,uCAG5DX,mBAAA,CAAwD;IAAhDF,KAAK,EAAAgB,eAAA,CAAEJ,KAAA,CAAAkB,QAAQ;IAAE7B,GAAG,EAAC;sBAAOW,KAAA,CAAAmB,QAAQ,wB"},"metadata":{},"sourceType":"module","externalDependencies":[]}