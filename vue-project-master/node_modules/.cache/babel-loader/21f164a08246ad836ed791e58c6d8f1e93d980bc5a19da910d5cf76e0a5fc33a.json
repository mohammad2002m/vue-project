{"ast":null,"code":"import _defineProperty from \"D:/Vue/vue-project-last-edition/vue-project/vue-project-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { Status } from './constants.js';\nclass Database {\n  static getFlow() {\n    return JSON.parse(localStorage.getItem(\"businessFlow\"));\n  }\n  static getFlowForRequestId(requestId) {\n    const requestType = Database.getRequestWithId(requestId).requestType;\n    const businessFlow = Database.getFlow();\n    return businessFlow[requestType];\n  }\n  static isRequestMine(userId, requestId) {\n    const request = Database.getRequestWithId(requestId);\n    return request.userId = userId;\n  }\n  static isRoleManager(role) {\n    return role != 4;\n  }\n  static isCurrentUserManager() {\n    const user = Database.getCurrentUser();\n    return user.role != 4;\n  }\n  static isShowRejectAccpetForUserRequest(userId, requestId) {\n    const flow = Database.getFlowForRequestId(requestId);\n    const request = Database.getRequestWithId(requestId);\n    const user = Database.getUserWithId(userId);\n    const index = flow.indexOf(user.role);\n    if (index != request.step) return false;\n    return request.status != Status.Accepted && request.status != Status.Rejected;\n  }\n  static getTypeForRoleToSend(role, requestId) {\n    console.log(role);\n    console.log(requestId);\n    return 0;\n  }\n  static isShowUserIdRequest(userId, requestId) {\n    const user = Database.getUserWithId(userId);\n    const flow = Database.getFlowForRequestId(requestId);\n    const request = Database.getRequestWithId(requestId);\n    const index = flow.indexOf(user.role);\n    if (index == -1) {\n      return request.userId == userId;\n    }\n    if (index <= request.step) return true;\n    return false;\n  }\n  static isShowAsNotificationUserIdRequest(userId, requestId) {\n    const user = Database.getUserWithId(userId);\n    const flow = Database.getFlowForRequestId(requestId);\n    const request = Database.getRequestWithId(requestId);\n    const index = flow.indexOf(user.role);\n    if (index == -1) {\n      return request.userId == userId;\n    }\n    if (index <= request.step) return false;\n    if (request.status == Status.Rejected) return true;\n    return false;\n  }\n  static getStatusForRoleRequest(role, requestId) {\n    const flow = Database.getFlowForRequestId(requestId);\n    const request = Database.getRequestWithId(requestId);\n    const index = flow.indexOf(role);\n    if (index == -1) {\n      // if I am not in the flow then it must be my request\n      return request.status;\n    } else if (index < request.step) {\n      return Status.Accepted;\n    } else if (index == request.step) {\n      return request.status;\n    }\n  }\n  static getRoles() {\n    return JSON.parse(localStorage.getItem('roles'));\n  }\n  static getAtRoleNameForRequest(requestId) {\n    const roles = Database.getRoles();\n    const request = Database.getRequestWithId(requestId);\n    const flow = Database.getFlowForRequestId(requestId);\n    return roles[flow[request.step]];\n  }\n  static getStatusMessageForUserIdRequest(userId, requestId) {\n    const user = this.getUserWithId(userId);\n    const status = this.getStatusForRoleRequest(user.role, requestId);\n    const request = Database.getRequestWithId(requestId);\n    const flow = Database.getFlowForRequestId(requestId);\n    if (request.userId == userId) {\n      // meaning it's my request\n      if (request.step == flow.length - 1) {\n        return Status[status].EmployeeMessage.toString();\n      } else {\n        return Status[status].EmployeeMessage.toString() + ' عند ' + Database.getAtRoleNameForRequest(requestId); // complete\n      }\n    } else {\n      return Status[status].ManagerMessage;\n    }\n  }\n  static initDatabase() {\n    let requestTable = [];\n    let roles = {\n      0: 'رئيس الجامعة',\n      1: 'نائب إداري',\n      2: 'شؤون الموظفين',\n      3: 'مدير الدائرة الإدارية',\n      4: 'موظف'\n    };\n    let businessFlow = {\n      0: [3, 2, 1, 0],\n      1: [3, 2, 1],\n      2: [1, 0],\n      3: [2, 1, 0]\n    };\n    let notifications = [];\n    let userTable = [{\n      userId: 0,\n      name: \"قصي أبو سوط\",\n      username: \"a\",\n      password: \"a\",\n      role: 0,\n      email: \"q2016@gmail.com\",\n      phoneNumber: \"0599382984\",\n      management: \"كلية الطب\"\n    }, {\n      userId: 1,\n      name: \"قصي أبو سوط\",\n      username: \"b\",\n      password: \"b\",\n      role: 1,\n      email: \"q2016@gmail.com\",\n      phoneNumber: \"0599382984\",\n      management: \"كلية الطب\"\n    }, {\n      userId: 2,\n      name: \"محمد بن بلال\",\n      username: \"c\",\n      password: \"c\",\n      role: 2,\n      email: \"moh2020@gmail.com\",\n      phoneNumber: \"0569581089\",\n      management: \"كلية الطب\"\n    }, {\n      userId: 3,\n      name: \"أبو شريف\",\n      username: \"d\",\n      password: \"d\",\n      role: 3,\n      email: \"test@gmail.com\",\n      phoneNumber: \"0595118296\",\n      management: \"شؤون الطلبة\"\n    }, {\n      userId: 4,\n      name: \"محمد بلال\",\n      username: \"e\",\n      password: \"e\",\n      role: 4,\n      email: \"test@gmail.com\",\n      phoneNumber: \"0595118296\",\n      management: \"كلية التكنولوجيا\"\n    }];\n    console.log('test: ' + typeof notifications);\n    localStorage.setItem(\"userTable\", JSON.stringify(userTable));\n    localStorage.setItem(\"requestTable\", JSON.stringify(requestTable));\n    localStorage.setItem(\"businessFlow\", JSON.stringify(businessFlow));\n    localStorage.setItem(\"roles\", JSON.stringify(roles));\n    localStorage.setItem(\"notificationsSeen\", JSON.stringify(notifications));\n    let users = JSON.parse(localStorage.getItem(\"userTable\"));\n    let requests = JSON.parse(localStorage.getItem(\"requestTable\"));\n    localStorage.setItem(\"userTable\", JSON.stringify(users));\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\n  }\n  static getNotificationsSeen() {\n    return JSON.parse(localStorage.getItem('notificationsSeen'));\n  }\n  static getCurrentUserId() {\n    return JSON.parse(localStorage.getItem(\"currentUserId\"));\n  }\n  static getNameforRequestId() {\n    return this.getUserWithId(this.getRequestArray().userId).name;\n  }\n  static setCurrentUserId(userId) {\n    localStorage.setItem(\"currentUserId\", JSON.stringify(userId));\n  }\n  static getAllUsersWithoutCurrentId(userId) {\n    return this.getRequestArray().filter(request => request.userId != userId);\n  }\n  static getCurrentUser() {\n    return Database.getUserWithId(JSON.parse(localStorage.getItem(\"currentUserId\")));\n  }\n  static getUsersArray() {\n    return JSON.parse(localStorage.getItem(\"userTable\"));\n  }\n  static getUserWithId(userId) {\n    return Database.getUsersArray().find(user => user.userId === userId);\n  }\n  static getRequestArray() {\n    return JSON.parse(localStorage.getItem(\"requestTable\"));\n  }\n  static getRequestArrayToShowForUserId(userId) {\n    let requests = Database.getRequestArray();\n    requests = requests.filter(request => {\n      return this.isShowUserIdRequest(userId, request.requestId);\n    });\n    return requests;\n  }\n  static addNotificationSeen(userId, requestId) {\n    let notificationsSeen = Database.getNotificationsSeen();\n    notificationsSeen.push({\n      userId: userId,\n      requestId: requestId\n    });\n    localStorage.setItem(\"notificationsSeen\", JSON.stringify(notificationsSeen));\n  }\n  static getNotificationMessageUserIdRequest(userId, requestId) {\n    if (Database.IsSeenNotification(userId, requestId)) {\n      return 'مقروء';\n    } else {\n      return 'غير مقروء';\n    }\n  }\n  static IsSeenNotification(userId, requestId) {\n    const notificationsSeenArray = Database.getNotificationsSeen();\n    console.log(typeof notificationsSeenArray);\n    notificationsSeenArray.forEach(notificationSeen => {\n      if (notificationSeen.userId == userId && notificationSeen.requestId == requestId) {\n        return true;\n      }\n    });\n    return false;\n  }\n  static getNotificationCountForUserId(userId) {\n    let requests = Database.getRequestArray();\n    let count = 0;\n    requests.map(request => {\n      if (Database.isShowAsNotificationUserIdRequest(userId, request.requestId) && !Database.IsSeenNotification(userId, request.requestId)) {\n        count += 1;\n      }\n    });\n    return count;\n  }\n  static getRequestArrayToShowAsNotificationForUserId(userId) {\n    let requests = Database.getRequestArray();\n    requests = requests.filter(request => {\n      return this.isShowAsNotificationUserIdRequest(userId, request.requestId);\n    });\n    return requests;\n  }\n  static getRequestArrayWithUserId(userId) {\n    return Database.getRequestArray().filter(request => request.userId === userId);\n  }\n  static getRequestWithId(requestId) {\n    return Database.getRequestArray().filter(request => request.requestId === requestId)[0];\n  }\n  static getCurrentUserRole() {\n    return Database.getCurrentUser().role;\n  }\n  static addRequest(request) {\n    const requestTableFromLocalStorage = Database.getRequestArray();\n    requestTableFromLocalStorage.push(request);\n    localStorage.setItem(\"requestTable\", JSON.stringify(requestTableFromLocalStorage));\n  }\n  static isActionTaken(requestId) {\n    let request = Database.getRequestWithId(requestId);\n    return request.status == Status.Accepted || request.status == Status.Rejected;\n  }\n  static isRequestRejected(requestId) {\n    let request = Database.getRequestWithId(requestId);\n    return request.status == Status.Rejected;\n  }\n  static rejectRequest(requestId, rejectReason) {\n    const requests = Database.getRequestArray();\n    requests.filter(request => {\n      if (request.requestId == requestId) {\n        request.status = Status.Rejected;\n        request.rejectReason = rejectReason;\n      }\n    });\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\n  }\n  static acceptRequest(requestId) {\n    const requests = Database.getRequestArray();\n    const flow = Database.getFlowForRequestId(requestId);\n    requests.filter(request => {\n      if (request.requestId == requestId) {\n        if (request.step == flow.length - 1) {\n          request.status = Status.Accepted;\n        } else {\n          request.status = Status.NotSeen;\n          request.step += 1;\n        }\n      }\n    });\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\n  }\n  static makeRequestSeen(requestId) {\n    const requests = Database.getRequestArray();\n    requests.filter(request => {\n      if (request.requestId == requestId) {\n        request.status = Status.Seen;\n      }\n    });\n    localStorage.setItem(\"requestTable\", JSON.stringify(requests));\n  }\n  static getUniqueId() {\n    return Database.getRequestArray().length;\n  }\n}\n_defineProperty(Database, \"currentUserId\", null);\nexport default Database;","map":{"version":3,"names":["Status","Database","getFlow","JSON","parse","localStorage","getItem","getFlowForRequestId","requestId","requestType","getRequestWithId","businessFlow","isRequestMine","userId","request","isRoleManager","role","isCurrentUserManager","user","getCurrentUser","isShowRejectAccpetForUserRequest","flow","getUserWithId","index","indexOf","step","status","Accepted","Rejected","getTypeForRoleToSend","console","log","isShowUserIdRequest","isShowAsNotificationUserIdRequest","getStatusForRoleRequest","getRoles","getAtRoleNameForRequest","roles","getStatusMessageForUserIdRequest","length","EmployeeMessage","toString","ManagerMessage","initDatabase","requestTable","notifications","userTable","name","username","password","email","phoneNumber","management","setItem","stringify","users","requests","getNotificationsSeen","getCurrentUserId","getNameforRequestId","getRequestArray","setCurrentUserId","getAllUsersWithoutCurrentId","filter","getUsersArray","find","getRequestArrayToShowForUserId","addNotificationSeen","notificationsSeen","push","getNotificationMessageUserIdRequest","IsSeenNotification","notificationsSeenArray","forEach","notificationSeen","getNotificationCountForUserId","count","map","getRequestArrayToShowAsNotificationForUserId","getRequestArrayWithUserId","getCurrentUserRole","addRequest","requestTableFromLocalStorage","isActionTaken","isRequestRejected","rejectRequest","rejectReason","acceptRequest","NotSeen","makeRequestSeen","Seen","getUniqueId","_defineProperty"],"sources":["D:/Vue/vue-project-last-edition/vue-project/vue-project-master/database.js"],"sourcesContent":["    import { Status } from './constants.js';\r\n    class Database {\r\n      static currentUserId = null;\r\n      static getFlow() {\r\n        return JSON.parse(localStorage.getItem(\"businessFlow\"));\r\n      }\r\n      static getFlowForRequestId(requestId) {\r\n        const requestType = Database.getRequestWithId(requestId).requestType\r\n        const businessFlow = Database.getFlow()\r\n        return businessFlow[requestType];\r\n      }\r\n      static isRequestMine(userId , requestId){\r\n        const request = Database.getRequestWithId(requestId)\r\n        return request.userId = userId;\r\n      }\r\n      static isRoleManager(role){\r\n        return role != 4;\r\n      }\r\n      static isCurrentUserManager(){\r\n        const user = Database.getCurrentUser()\r\n        return user.role != 4;\r\n      }\r\n      static isShowRejectAccpetForUserRequest(userId , requestId){\r\n        const flow = Database.getFlowForRequestId(requestId)\r\n        const request = Database.getRequestWithId(requestId)\r\n        const user = Database.getUserWithId(userId)\r\n        const index = flow.indexOf(user.role);\r\n        if (index != request.step) return false;\r\n        return (request.status != Status.Accepted && request.status != Status.Rejected);\r\n      }\r\n      static getTypeForRoleToSend(role, requestId){\r\n        console.log(role)\r\n        console.log(requestId)\r\n        return 0;\r\n      }\r\n      static isShowUserIdRequest(userId , requestId) {\r\n        const user = Database.getUserWithId(userId);\r\n        const flow = Database.getFlowForRequestId(requestId)\r\n        const request = Database.getRequestWithId(requestId)\r\n        const index = flow.indexOf(user.role);\r\n        if (index == -1){\r\n          return request.userId == userId;\r\n        } if (index <= request.step) return true;\r\n        return false;\r\n      }\r\n      static isShowAsNotificationUserIdRequest(userId , requestId) {\r\n        const user = Database.getUserWithId(userId);\r\n        const flow = Database.getFlowForRequestId(requestId)\r\n        const request = Database.getRequestWithId(requestId)\r\n        const index = flow.indexOf(user.role);\r\n        if (index == -1){\r\n          return request.userId == userId;\r\n        } if (index <= request.step) return false;\r\n        if (request.status == Status.Rejected) return true;\r\n        return false;\r\n      }\r\n      static getStatusForRoleRequest(role, requestId) {\r\n        const flow = Database.getFlowForRequestId(requestId)\r\n        const request = Database.getRequestWithId(requestId)\r\n        const index = flow.indexOf(role);\r\n        if (index == -1){ // if I am not in the flow then it must be my request\r\n          return request.status;\r\n        } else if (index < request.step){\r\n          return Status.Accepted;\r\n        } else if (index == request.step){\r\n          return request.status;\r\n        }\r\n      }\r\n      \r\n      static getRoles(){\r\n        return JSON.parse(localStorage.getItem('roles'));\r\n      }\r\n      static getAtRoleNameForRequest(requestId){\r\n        const roles = Database.getRoles();\r\n        const request = Database.getRequestWithId(requestId);\r\n        const flow = Database.getFlowForRequestId(requestId)\r\n        return roles[flow[request.step]];\r\n      }\r\n      static getStatusMessageForUserIdRequest(userId, requestId) {\r\n        const user = this.getUserWithId(userId)\r\n        const status = this.getStatusForRoleRequest(user.role, requestId)\r\n        const request = Database.getRequestWithId(requestId)\r\n        const flow = Database.getFlowForRequestId(requestId)\r\n        if (request.userId == userId){ // meaning it's my request\r\n          if (request.step == flow.length - 1){\r\n            return Status[status].EmployeeMessage.toString();\r\n          } else {\r\n            return Status[status].EmployeeMessage.toString() + ' عند ' + Database.getAtRoleNameForRequest(requestId); // complete\r\n          }\r\n        } else {\r\n          return Status[status].ManagerMessage;\r\n        }\r\n      }\r\n      static initDatabase() {\r\n        let requestTable = [];\r\n        let roles = {\r\n          0: 'رئيس الجامعة',\r\n          1: 'نائب إداري',\r\n          2: 'شؤون الموظفين',\r\n          3: 'مدير الدائرة الإدارية',\r\n          4: 'موظف',\r\n        };\r\n        let businessFlow = {\r\n          0: [3, 2, 1, 0],\r\n          1: [3, 2, 1],\r\n          2: [1, 0],\r\n          3: [2, 1, 0],\r\n        };\r\n        let notifications = [];\r\n        let userTable = [\r\n          {\r\n            userId: 0,\r\n            name: \"قصي أبو سوط\",\r\n            username: \"a\",\r\n            password: \"a\",\r\n            role: 0,\r\n            email: \"q2016@gmail.com\",\r\n            phoneNumber: \"0599382984\",\r\n            management: \"كلية الطب\",\r\n          },\r\n          {\r\n            userId: 1,\r\n            name: \"قصي أبو سوط\",\r\n            username: \"b\",\r\n            password: \"b\",\r\n            role: 1,\r\n            email: \"q2016@gmail.com\",\r\n            phoneNumber: \"0599382984\",\r\n            management: \"كلية الطب\",\r\n          },\r\n          {\r\n            userId: 2,\r\n            name: \"محمد بن بلال\",\r\n            username: \"c\",\r\n            password: \"c\",\r\n            role: 2,\r\n            email: \"moh2020@gmail.com\",\r\n            phoneNumber: \"0569581089\",\r\n            management: \"كلية الطب\",\r\n          },\r\n          {\r\n            userId: 3,\r\n            name: \"أبو شريف\",\r\n            username: \"d\",\r\n            password: \"d\",\r\n            role: 3,\r\n            email: \"test@gmail.com\",\r\n            phoneNumber: \"0595118296\",\r\n            management: \"شؤون الطلبة\",\r\n          },\r\n          {\r\n            userId: 4,\r\n            name: \"محمد بلال\",\r\n            username: \"e\",\r\n            password: \"e\",\r\n            role: 4,\r\n            email: \"test@gmail.com\",\r\n            phoneNumber: \"0595118296\",\r\n            management: \"كلية التكنولوجيا\",\r\n          },\r\n        ];\r\n\r\n        console.log('test: ' + typeof notifications)\r\n        localStorage.setItem(\"userTable\", JSON.stringify(userTable));\r\n        localStorage.setItem(\"requestTable\", JSON.stringify(requestTable));\r\n        localStorage.setItem(\"businessFlow\", JSON.stringify(businessFlow));\r\n        localStorage.setItem(\"roles\", JSON.stringify(roles));\r\n        localStorage.setItem(\"notificationsSeen\", JSON.stringify(notifications));\r\n\r\n        let users = JSON.parse(localStorage.getItem(\"userTable\"));\r\n        let requests = JSON.parse(localStorage.getItem(\"requestTable\"));\r\n\r\n        localStorage.setItem(\"userTable\", JSON.stringify(users));\r\n        localStorage.setItem(\"requestTable\", JSON.stringify(requests));\r\n      }\r\n\r\n      static getNotificationsSeen(){\r\n        return JSON.parse(localStorage.getItem('notificationsSeen'));\r\n      }\r\n      static getCurrentUserId() {\r\n        return JSON.parse(localStorage.getItem(\"currentUserId\"));\r\n      }\r\n\r\n      static getNameforRequestId() {\r\n        return this.getUserWithId(this.getRequestArray().userId).name;\r\n      }\r\n\r\n      static setCurrentUserId(userId) {\r\n        localStorage.setItem(\"currentUserId\", JSON.stringify(userId));\r\n      }\r\n\r\n      static getAllUsersWithoutCurrentId(userId) {\r\n        return this.getRequestArray().filter((request) => request.userId != userId);\r\n      }\r\n\r\n      static getCurrentUser() {\r\n        return Database.getUserWithId(\r\n          JSON.parse(localStorage.getItem(\"currentUserId\"))\r\n        );\r\n      }\r\n\r\n      static getUsersArray() {\r\n        return JSON.parse(localStorage.getItem(\"userTable\"));\r\n      }\r\n\r\n      static getUserWithId(userId) {\r\n        return Database.getUsersArray().find((user) => user.userId === userId);\r\n      }\r\n\r\n      static getRequestArray() {\r\n        return JSON.parse(localStorage.getItem(\"requestTable\"));\r\n      }\r\n\r\n      static getRequestArrayToShowForUserId(userId){\r\n        let requests = Database.getRequestArray()\r\n        requests = requests.filter((request) => {\r\n          return this.isShowUserIdRequest(userId , request.requestId)\r\n        })\r\n        return requests;\r\n      }\r\n\r\n      static addNotificationSeen(userId , requestId){\r\n        let notificationsSeen = Database.getNotificationsSeen()\r\n        notificationsSeen.push({userId: userId , requestId: requestId});\r\n        localStorage.setItem(\"notificationsSeen\" , JSON.stringify(notificationsSeen));\r\n      }\r\n      static getNotificationMessageUserIdRequest(userId, requestId){\r\n        if (Database.IsSeenNotification(userId , requestId)){\r\n          return 'مقروء';\r\n        } else {\r\n          return 'غير مقروء';\r\n        }\r\n      }\r\n      static IsSeenNotification(userId , requestId){\r\n        const notificationsSeenArray = Database.getNotificationsSeen()\r\n        console.log(typeof notificationsSeenArray)\r\n        notificationsSeenArray.forEach(notificationSeen => {\r\n          if (notificationSeen.userId == userId && notificationSeen.requestId == requestId){\r\n            return true;\r\n          }\r\n        });\r\n        return false;\r\n      }\r\n      static getNotificationCountForUserId(userId){\r\n        let requests = Database.getRequestArray()\r\n        let count = 0;\r\n        requests.map((request) => {\r\n          if (Database.isShowAsNotificationUserIdRequest(userId , request.requestId) && !Database.IsSeenNotification(userId, request.requestId)){\r\n            count += 1;\r\n          }\r\n        })\r\n        return count;\r\n      }\r\n      static getRequestArrayToShowAsNotificationForUserId(userId){\r\n        let requests = Database.getRequestArray()\r\n        requests = requests.filter((request) => {\r\n          return this.isShowAsNotificationUserIdRequest(userId , request.requestId)\r\n        })\r\n        return requests;\r\n      }\r\n      static getRequestArrayWithUserId(userId) {\r\n        return Database.getRequestArray().filter(\r\n          (request) => request.userId === userId\r\n        );\r\n      }\r\n\r\n      static getRequestWithId(requestId) {\r\n        return Database.getRequestArray().filter(\r\n          (request) => request.requestId === requestId\r\n        )[0];\r\n      }\r\n\r\n      static getCurrentUserRole() {\r\n        return Database.getCurrentUser().role;\r\n      }\r\n\r\n      static addRequest(request) {\r\n        const requestTableFromLocalStorage = Database.getRequestArray();\r\n        requestTableFromLocalStorage.push(request);\r\n        localStorage.setItem(\r\n          \"requestTable\",\r\n          JSON.stringify(requestTableFromLocalStorage)\r\n        );\r\n      }\r\n      static isActionTaken(requestId) {\r\n        let request = Database.getRequestWithId(requestId)\r\n        return (request.status == Status.Accepted) || (request.status == Status.Rejected);\r\n      }\r\n      static isRequestRejected(requestId) {\r\n        let request = Database.getRequestWithId(requestId)\r\n        return request.status == Status.Rejected;\r\n      }\r\n\r\n      static rejectRequest(requestId, rejectReason) {\r\n        const requests = Database.getRequestArray();\r\n        requests.filter((request) => {\r\n          if (request.requestId == requestId) {\r\n            request.status = Status.Rejected;\r\n            request.rejectReason = rejectReason;\r\n          }\r\n        })\r\n        localStorage.setItem(\"requestTable\", JSON.stringify(requests));\r\n      }\r\n      static acceptRequest(requestId) {\r\n        const requests = Database.getRequestArray();\r\n        const flow = Database.getFlowForRequestId(requestId)\r\n        requests.filter((request) => {\r\n          if (request.requestId == requestId) {\r\n            if (request.step == flow.length - 1){\r\n              request.status = Status.Accepted;\r\n            } else {\r\n              request.status = Status.NotSeen;\r\n              request.step += 1;\r\n            }\r\n          }\r\n        })\r\n        localStorage.setItem(\"requestTable\", JSON.stringify(requests));\r\n      }\r\n      static makeRequestSeen(requestId) {\r\n        const requests = Database.getRequestArray();\r\n        requests.filter((request) => {\r\n          if (request.requestId == requestId) {\r\n            request.status = Status.Seen;\r\n          }\r\n        })\r\n        localStorage.setItem(\"requestTable\", JSON.stringify(requests));\r\n\r\n      }\r\n      static getUniqueId() {\r\n        return Database.getRequestArray().length;\r\n      }\r\n    }\r\n\r\n    export default Database;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}