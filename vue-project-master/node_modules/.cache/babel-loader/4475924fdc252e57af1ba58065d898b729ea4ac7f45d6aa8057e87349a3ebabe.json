{"ast":null,"code":"import { required, email, minLength, sameAs } from \"vuelidate/lib/validators\";\nexport default {\n  name: \"app\",\n  data() {\n    return {\n      user: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n      },\n      submitted: false\n    };\n  },\n  validations: {\n    user: {\n      firstName: {\n        required\n      },\n      lastName: {\n        required\n      },\n      email: {\n        required,\n        email\n      },\n      password: {\n        required,\n        minLength: minLength(6)\n      },\n      confirmPassword: {\n        required,\n        sameAsPassword: sameAs('password')\n      }\n    }\n  },\n  methods: {\n    handleSubmit(e) {\n      this.submitted = true;\n\n      // stop here if form is invalid\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n      alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(this.user));\n    }\n  }\n};","map":{"version":3,"names":["required","email","minLength","sameAs","name","data","user","firstName","lastName","password","confirmPassword","submitted","validations","sameAsPassword","methods","handleSubmit","e","$v","$touch","$invalid","alert","JSON","stringify"],"sources":["D:\\Vue\\vue-project-last-edition\\vue-project\\vue-project-master\\src\\components\\RequestForm\\RequestForm.vue"],"sourcesContent":["<template>\r\n    <div class=\"jumbotron\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-8 offset-sm-2\">\r\n                    <div>\r\n                        <h2>Vue.js + Vuelidate - Form Validation</h2>\r\n                        <form @submit.prevent=\"handleSubmit\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"firstName\">First Name</label>\r\n                                <input type=\"text\" v-model=\"user.firstName\" id=\"firstName\" name=\"firstName\" class=\"form-control\" :class=\"{ 'is-invalid': submitted && $v.user.firstName.$error }\" />\r\n                                <div v-if=\"submitted && !$v.user.firstName.required\" class=\"invalid-feedback\">First Name is required</div>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"lastName\">Last Name</label>\r\n                                <input type=\"text\" v-model=\"user.lastName\" id=\"lastName\" name=\"lastName\" class=\"form-control\" :class=\"{ 'is-invalid': submitted && $v.user.lastName.$error }\" />\r\n                                <div v-if=\"submitted && !$v.user.lastName.required\" class=\"invalid-feedback\">Last Name is required</div>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"email\">Email</label>\r\n                                <input type=\"email\" v-model=\"user.email\" id=\"email\" name=\"email\" class=\"form-control\" :class=\"{ 'is-invalid': submitted && $v.user.email.$error }\" />\r\n                                <div v-if=\"submitted && $v.user.email.$error\" class=\"invalid-feedback\">\r\n                                    <span v-if=\"!$v.user.email.required\">Email is required</span>\r\n                                    <span v-if=\"!$v.user.email.email\">Email is invalid</span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"password\">Password</label>\r\n                                <input type=\"password\" v-model=\"user.password\" id=\"password\" name=\"password\" class=\"form-control\" :class=\"{ 'is-invalid': submitted && $v.user.password.$error }\" />\r\n                                <div v-if=\"submitted && $v.user.password.$error\" class=\"invalid-feedback\">\r\n                                    <span v-if=\"!$v.user.password.required\">Password is required</span>\r\n                                    <span v-if=\"!$v.user.password.minLength\">Password must be at least 6 characters</span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"confirmPassword\">Confirm Password</label>\r\n                                <input type=\"password\" v-model=\"user.confirmPassword\" id=\"confirmPassword\" name=\"confirmPassword\" class=\"form-control\" :class=\"{ 'is-invalid': submitted && $v.user.confirmPassword.$error }\" />\r\n                                <div v-if=\"submitted && $v.user.confirmPassword.$error\" class=\"invalid-feedback\">\r\n                                    <span v-if=\"!$v.user.confirmPassword.required\">Confirm Password is required</span>\r\n                                    <span v-else-if=\"!$v.user.confirmPassword.sameAsPassword\">Passwords must match</span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <button class=\"btn btn-primary\">Register</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { required, email, minLength, sameAs } from \"vuelidate/lib/validators\";\r\n\r\n    export default {\r\n        name: \"app\",\r\n        data() {\r\n            return {\r\n                user: {\r\n                    firstName: \"\",\r\n                    lastName: \"\",\r\n                    email: \"\",\r\n                    password: \"\",\r\n                    confirmPassword: \"\"\r\n                },\r\n                submitted: false\r\n            };\r\n        },\r\n        validations: {\r\n            user: {\r\n                firstName: { required },\r\n                lastName: { required },\r\n                email: { required, email },\r\n                password: { required, minLength: minLength(6) },\r\n                confirmPassword: { required, sameAsPassword: sameAs('password') }\r\n            }\r\n        },\r\n        methods: {\r\n            handleSubmit(e) {\r\n                this.submitted = true;\r\n\r\n                // stop here if form is invalid\r\n                this.$v.$touch();\r\n                if (this.$v.$invalid) {\r\n                    return;\r\n                }\r\n\r\n                alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(this.user));\r\n            }\r\n        }\r\n    };\r\n</script>"],"mappings":"AAsDI,SAASA,QAAQ,EAAEC,KAAK,EAAEC,SAAS,EAAEC,MAAK,QAAS,0BAA0B;AAE7E,eAAe;EACXC,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,IAAI,EAAE;QACFC,SAAS,EAAE,EAAE;QACbC,QAAQ,EAAE,EAAE;QACZP,KAAK,EAAE,EAAE;QACTQ,QAAQ,EAAE,EAAE;QACZC,eAAe,EAAE;MACrB,CAAC;MACDC,SAAS,EAAE;IACf,CAAC;EACL,CAAC;EACDC,WAAW,EAAE;IACTN,IAAI,EAAE;MACFC,SAAS,EAAE;QAAEP;MAAS,CAAC;MACvBQ,QAAQ,EAAE;QAAER;MAAS,CAAC;MACtBC,KAAK,EAAE;QAAED,QAAQ;QAAEC;MAAM,CAAC;MAC1BQ,QAAQ,EAAE;QAAET,QAAQ;QAAEE,SAAS,EAAEA,SAAS,CAAC,CAAC;MAAE,CAAC;MAC/CQ,eAAe,EAAE;QAAEV,QAAQ;QAAEa,cAAc,EAAEV,MAAM,CAAC,UAAU;MAAE;IACpE;EACJ,CAAC;EACDW,OAAO,EAAE;IACLC,YAAYA,CAACC,CAAC,EAAE;MACZ,IAAI,CAACL,SAAQ,GAAI,IAAI;;MAErB;MACA,IAAI,CAACM,EAAE,CAACC,MAAM,EAAE;MAChB,IAAI,IAAI,CAACD,EAAE,CAACE,QAAQ,EAAE;QAClB;MACJ;MAEAC,KAAK,CAAC,mBAAkB,GAAIC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAChB,IAAI,CAAC,CAAC;IAC1D;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}