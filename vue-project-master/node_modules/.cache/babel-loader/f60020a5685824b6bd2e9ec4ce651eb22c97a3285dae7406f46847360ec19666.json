{"ast":null,"code":"import Copyright from \"./Copyright.vue\";\nimport FormSectionTitle from \"./FormSectionTitle.vue\";\nimport InputText from \"./InputText.vue\";\nimport InputNumber from \"./InputNumber.vue\";\nimport InputSelect from \"./InputSelect.vue\";\nimport InputDate from \"./InputDate.vue\";\nimport InputTextarea from \"./InputTextarea.vue\";\nimport TopNavigationBar from \"./TopNavigationBar.vue\";\nimport { inOrOutArray, vacationTypesArray } from '../../../constants.js';\nimport moment from 'moment';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, maxLength, minLength, minValue, between } from '@vuelidate/validators';\nexport default {\n  name: \"RequestForm\",\n  components: {\n    Copyright,\n    FormSectionTitle,\n    InputText,\n    InputTextarea,\n    InputNumber,\n    InputSelect,\n    InputDate,\n    TopNavigationBar\n  },\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      fullName: '',\n      phoneNumber: '',\n      fromDate: moment().format('YYYY-MM-DD').toString(),\n      toDate: moment().format('YYYY-MM-DD').toString(),\n      excuse: '',\n      vacationType: 'سنوية',\n      department: '',\n      inOrOut: 'داخل البلاد',\n      inOrOutArray: inOrOutArray,\n      vacationTypesArray: vacationTypesArray,\n      formReadOnly: false\n    };\n  },\n  validations() {\n    return {\n      fullName: {\n        required,\n        maxLengthValue: maxLength(30)\n      },\n      department: {\n        required\n      },\n      phoneNumber: {\n        required,\n        minLengthValue: minLength(10),\n        minValueValue: minValue(1)\n      },\n      fromDate: {\n        required,\n        between: between(moment().format('YYYY-MM-DD').toString(), this.toDate.toString())\n      },\n      toDate: {\n        required,\n        between: between(this.fromDate.toString(), '4000-01-01')\n      },\n      excuse: {\n        required\n      },\n      vacationType: {\n        required\n      },\n      inOrOut: {\n        required\n      }\n    };\n  },\n  mounted() {\n    if (this.$route.query.requestId) {\n      console.log(this.$route.query.requestId + \"YES\");\n      let requestId = parseInt(this.$route.query.requestId);\n      console.log(this.Database.getRequestWithId(requestId));\n      let userId = this.Database.getRequestWithId(requestId).userId;\n      this.formReadOnly = true;\n      this.fullName = this.Database.getUserWithId(userId).name;\n      this.phoneNumber = this.Database.getUserWithId(userId).phoneNumber;\n      this.department = this.Database.getRequestWithId(requestId).management;\n      this.vacationType = this.Database.getRequestWithId(requestId).holidayType;\n      this.inOrOut = this.Database.getRequestWithId(requestId).inOrOut;\n      this.excuse = this.Database.getRequestWithId(requestId).holidayReason;\n      this.fromDate = this.Database.getRequestWithId(requestId).fromDate;\n      this.toDate = this.Database.getRequestWithId(requestId).toDate;\n    } else {\n      console.log('No');\n    }\n  },\n  methods: {\n    sendRequest() {\n      const newVacation = this.vacationType;\n      const newToDate = this.toDate;\n      const newFromDate = this.fromDate;\n      const newExcuse = this.excuse;\n      const newInOrOut = this.inOrOut;\n      let newRequest = {\n        holidayType: newVacation,\n        management: this.Database.getRequestWithId(this.Database.getCurrentUserId()).management,\n        fromDate: newFromDate,\n        toDate: newToDate,\n        status: 'جديد',\n        inOrOut: newInOrOut,\n        userId: this.Database.getCurrentUserId(),\n        holidayReason: newExcuse,\n        requestId: Math.floor(Math.random() * 10000)\n      };\n      this.Database.addRequest(newRequest);\n      console.log(newRequest), console.log(this.Database.getRequestArray());\n    },\n    classValue(dirty, invalid) {\n      console.log(this.fromDate, this.toDate);\n      console.log(dirty, invalid);\n      if (!dirty) {\n        return '';\n      } else if (invalid) {\n        return 'is-invalid';\n      } else return 'is-valid';\n    }\n  }\n};","map":{"version":3,"names":["Copyright","FormSectionTitle","InputText","InputNumber","InputSelect","InputDate","InputTextarea","TopNavigationBar","inOrOutArray","vacationTypesArray","moment","useVuelidate","required","maxLength","minLength","minValue","between","name","components","setup","v$","data","fullName","phoneNumber","fromDate","format","toString","toDate","excuse","vacationType","department","inOrOut","formReadOnly","validations","maxLengthValue","minLengthValue","minValueValue","mounted","$route","query","requestId","console","log","parseInt","Database","getRequestWithId","userId","getUserWithId","management","holidayType","holidayReason","methods","sendRequest","newVacation","newToDate","newFromDate","newExcuse","newInOrOut","newRequest","getCurrentUserId","status","Math","floor","random","addRequest","getRequestArray","classValue","dirty","invalid"],"sources":["D:\\Vue\\vue-project-last-edition\\vue-project\\vue-project-master\\src\\components\\RequestForm\\RequestForm.vue"],"sourcesContent":["<template>\r\n  <!--\r\n\r\n    <img src=\"../../assets/hebron.png\" class=\"mx-auto d-block responsive-img\" alt=\"Responsive image\"\r\n      style=\"width: 200px;\" />\r\n  -->\r\n  <TopNavigationBar />\r\n  <div class=\"container col-xl-9 p-5 gx-5  rounded box\">\r\n    <span class=\"form-title\"> نموذج طلب إجازة </span>\r\n\r\n    <FormSectionTitle title=\"المعلومات الشخصية\" />\r\n\r\n    <InputText v-model=\"v$.fullName.$model\" :classValue=\"classValue(v$.fullName.$dirty , v$.fullName.$error)\" title=\"الاسم الكامل\" :isReadOnly=\"formReadOnly\" />\r\n\r\n    <div class=\"row gx-5\">\r\n      <InputText v-model=\"v$.department.$model\" :classValue=\"classValue(v$.department.$dirty , v$.department.$error)\" title=\"الدائرة الإدارية\" :isReadOnly=\"formReadOnly\" />\r\n      <InputNumber v-model=\"v$.phoneNumber.$model\" :classValue=\"classValue(v$.phoneNumber.$dirty , v$.phoneNumber.$error)\" title=\"رقم الهاتف\" :isReadOnly=\"formReadOnly\" />\r\n    </div>\r\n\r\n    <FormSectionTitle title=\"تفاصيل الإجازة\" />\r\n\r\n    <div class=\"row gx-5\">\r\n      <InputSelect v-model=\"v$.vacationType.$model\" :classValue=\"classValue(v$.vacationType.$dirty , v$.vacationType.$error)\" title=\"نوع الإجازة\" :optionsList=\"vacationTypesArray\" :isReadOnly=\"formReadOnly\" />\r\n      <InputSelect v-model=\"v$.inOrOut.$model\" :classValue=\"classValue(v$.inOrOut.$dirty , v$.inOrOut.$error)\" title=\"داخل/خارج البلاد\" :optionsList=\"inOrOutArray\" :isReadOnly=\"formReadOnly\" />\r\n    </div>\r\n\r\n    <div class=\"row gx-5\">\r\n      <InputDate v-model=\"v$.fromDate.$model\" :classValue=\"classValue(v$.fromDate.$dirty , v$.fromDate.$error)\" title=\"من تاريخ\" :isReadOnly=\"formReadOnly\" />\r\n      <InputDate v-model=\"v$.toDate.$model\" :classValue=\"classValue(v$.toDate.$dirty, v$.toDate.$error)\" title=\"إلى تاريخ\" :isReadOnly=\"formReadOnly\" />\r\n    </div>\r\n\r\n    <InputTextarea v-model=\"v$.excuse.$model\" :classValue=\"classValue(v$.excuse.$dirty , v$.excuse.$error)\" inputType=\"textarea\" title=\"سبب الإجازة\" :isReadOnly=\"formReadOnly\" />\r\n\r\n    <div v-if=\"this.Database.isCurrentUserManager()\" style=\"text-align: center\">\r\n      <button class=\"btn btn-danger px-4 py-2\"> رفض </button>\r\n      <button class=\"btn btn-success px-4 py-2\"> قبول </button>\r\n    </div>\r\n    <div v-if=\"!this.Database.isCurrentUserManager()\" style=\"text-align: center\">\r\n      <button class=\"btn btn-success px-4 py-2\" @click=\"sendRequest\">إرسال</button>\r\n    </div>\r\n  </div>\r\n  <Copyright title=\"حقوق الطبع والنشر محفوظة\" />\r\n</template>\r\n\r\n<script>\r\nimport Copyright from \"./Copyright.vue\";\r\nimport FormSectionTitle from \"./FormSectionTitle.vue\";\r\nimport InputText from \"./InputText.vue\";\r\nimport InputNumber from \"./InputNumber.vue\";\r\nimport InputSelect from \"./InputSelect.vue\";\r\nimport InputDate from \"./InputDate.vue\";\r\nimport InputTextarea from \"./InputTextarea.vue\";\r\nimport TopNavigationBar from \"./TopNavigationBar.vue\";\r\nimport { inOrOutArray, vacationTypesArray } from '../../../constants.js'\r\nimport moment from 'moment';\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required , maxLength , minLength , minValue , between } from '@vuelidate/validators'\r\nexport default {\r\n  name: \"RequestForm\",\r\n  components: {\r\n    Copyright,\r\n    FormSectionTitle,\r\n    InputText,\r\n    InputTextarea,\r\n    InputNumber,\r\n    InputSelect,\r\n    InputDate,\r\n    TopNavigationBar,\r\n  },\r\n  setup() {\r\n    return { v$: useVuelidate()}\r\n  },\r\n\r\n\r\n  data() {\r\n    return {\r\n      fullName: '',\r\n      phoneNumber: '',\r\n      fromDate: moment().format('YYYY-MM-DD').toString(),\r\n      toDate: moment().format('YYYY-MM-DD').toString(),\r\n      excuse: '',\r\n      vacationType: 'سنوية',\r\n      department: '',\r\n      inOrOut: 'داخل البلاد',\r\n      inOrOutArray: inOrOutArray,\r\n      vacationTypesArray: vacationTypesArray,\r\n      formReadOnly: false,\r\n    };\r\n  },\r\n  validations() {\r\n    return {\r\n      fullName: {required , maxLengthValue: maxLength(30)},\r\n      department: {required},\r\n      phoneNumber: {required , minLengthValue: minLength(10), minValueValue: minValue(1)},\r\n      fromDate: {required , between: between(moment().format('YYYY-MM-DD').toString() , this.toDate.toString())},\r\n      toDate: {required , between: between(this.fromDate.toString() , '4000-01-01')},\r\n      excuse: {required},\r\n      vacationType: {required},\r\n      inOrOut: {required},\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.$route.query.requestId) {\r\n        console.log(this.$route.query.requestId + \"YES\");\r\n      \r\n        let requestId = parseInt(this.$route.query.requestId);\r\n        console.log(this.Database.getRequestWithId(requestId))\r\n        let userId = this.Database.getRequestWithId(requestId).userId;\r\n\r\n        this.formReadOnly = true;\r\n\r\n        this.fullName = this.Database.getUserWithId(userId).name;\r\n        this.phoneNumber = this.Database.getUserWithId(userId).phoneNumber;\r\n\r\n        this.department = this.Database.getRequestWithId(requestId).management;\r\n        this.vacationType = this.Database.getRequestWithId(requestId).holidayType;\r\n        this.inOrOut = this.Database.getRequestWithId(requestId).inOrOut;\r\n        this.excuse = this.Database.getRequestWithId(requestId).holidayReason;\r\n        this.fromDate = this.Database.getRequestWithId(requestId).fromDate;\r\n        this.toDate = this.Database.getRequestWithId(requestId).toDate;\r\n\r\n      }\r\n    else {\r\n      console.log('No');\r\n    }\r\n  },\r\n  methods: {\r\n    sendRequest() {\r\n      const newVacation = this.vacationType;\r\n      const newToDate = this.toDate;\r\n      const newFromDate = this.fromDate;\r\n      const newExcuse = this.excuse;\r\n      const newInOrOut = this.inOrOut;\r\n\r\n      let newRequest = {\r\n        holidayType: newVacation,\r\n        management: this.Database.getRequestWithId(this.Database.getCurrentUserId()).management,\r\n        fromDate: newFromDate,\r\n        toDate: newToDate,\r\n        status: 'جديد',\r\n        inOrOut: newInOrOut,\r\n        userId: this.Database.getCurrentUserId(),\r\n        holidayReason: newExcuse,\r\n        requestId: Math.floor(Math.random() * 10000),\r\n      };\r\n      this.Database.addRequest(newRequest);\r\n\r\n      console.log(newRequest),\r\n      console.log(this.Database.getRequestArray())\r\n    },\r\n    classValue(dirty , invalid){\r\n      console.log(this.fromDate , this.toDate)\r\n      console.log(dirty , invalid)\r\n      if (!dirty){\r\n        return '';\r\n      } else if (invalid){\r\n        return 'is-invalid';\r\n      } else return 'is-valid';\r\n  },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ndiv {\r\n  direction: rtl;\r\n}\r\n\r\n.form-title {\r\n  display: block;\r\n  text-align: center;\r\n  font-size: 22px;\r\n  margin-bottom: 3rem;\r\n}\r\n\r\n.box {\r\n  background-color: white;\r\n  margin-bottom: 50px;\r\n}\r\n\r\nbutton {\r\n  margin-right: 5px;\r\n  margin-left: 5px;\r\n}\r\n</style>\r\n"],"mappings":"AA6CA,OAAOA,SAAQ,MAAO,iBAAiB;AACvC,OAAOC,gBAAe,MAAO,wBAAwB;AACrD,OAAOC,SAAQ,MAAO,iBAAiB;AACvC,OAAOC,WAAU,MAAO,mBAAmB;AAC3C,OAAOC,WAAU,MAAO,mBAAmB;AAC3C,OAAOC,SAAQ,MAAO,iBAAiB;AACvC,OAAOC,aAAY,MAAO,qBAAqB;AAC/C,OAAOC,gBAAe,MAAO,wBAAwB;AACrD,SAASC,YAAY,EAAEC,kBAAiB,QAAS,uBAAsB;AACvE,OAAOC,MAAK,MAAO,QAAQ;AAC3B,SAASC,YAAW,QAAS,iBAAgB;AAC7C,SAASC,QAAO,EAAIC,SAAQ,EAAIC,SAAQ,EAAIC,QAAO,EAAIC,OAAM,QAAS,uBAAsB;AAC5F,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,UAAU,EAAE;IACVlB,SAAS;IACTC,gBAAgB;IAChBC,SAAS;IACTI,aAAa;IACbH,WAAW;IACXC,WAAW;IACXC,SAAS;IACTE;EACF,CAAC;EACDY,KAAKA,CAAA,EAAG;IACN,OAAO;MAAEC,EAAE,EAAET,YAAY;IAAE;EAC7B,CAAC;EAGDU,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAEd,MAAM,EAAE,CAACe,MAAM,CAAC,YAAY,CAAC,CAACC,QAAQ,EAAE;MAClDC,MAAM,EAAEjB,MAAM,EAAE,CAACe,MAAM,CAAC,YAAY,CAAC,CAACC,QAAQ,EAAE;MAChDE,MAAM,EAAE,EAAE;MACVC,YAAY,EAAE,OAAO;MACrBC,UAAU,EAAE,EAAE;MACdC,OAAO,EAAE,aAAa;MACtBvB,YAAY,EAAEA,YAAY;MAC1BC,kBAAkB,EAAEA,kBAAkB;MACtCuB,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,WAAWA,CAAA,EAAG;IACZ,OAAO;MACLX,QAAQ,EAAE;QAACV,QAAO;QAAIsB,cAAc,EAAErB,SAAS,CAAC,EAAE;MAAC,CAAC;MACpDiB,UAAU,EAAE;QAAClB;MAAQ,CAAC;MACtBW,WAAW,EAAE;QAACX,QAAO;QAAIuB,cAAc,EAAErB,SAAS,CAAC,EAAE,CAAC;QAAEsB,aAAa,EAAErB,QAAQ,CAAC,CAAC;MAAC,CAAC;MACnFS,QAAQ,EAAE;QAACZ,QAAO;QAAII,OAAO,EAAEA,OAAO,CAACN,MAAM,EAAE,CAACe,MAAM,CAAC,YAAY,CAAC,CAACC,QAAQ,EAAC,EAAI,IAAI,CAACC,MAAM,CAACD,QAAQ,EAAE;MAAC,CAAC;MAC1GC,MAAM,EAAE;QAACf,QAAO;QAAII,OAAO,EAAEA,OAAO,CAAC,IAAI,CAACQ,QAAQ,CAACE,QAAQ,EAAC,EAAI,YAAY;MAAC,CAAC;MAC9EE,MAAM,EAAE;QAAChB;MAAQ,CAAC;MAClBiB,YAAY,EAAE;QAACjB;MAAQ,CAAC;MACxBmB,OAAO,EAAE;QAACnB;MAAQ;IACpB;EACF,CAAC;EACDyB,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,SAAS,EAAE;MAC7BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,MAAM,CAACC,KAAK,CAACC,SAAQ,GAAI,KAAK,CAAC;MAEhD,IAAIA,SAAQ,GAAIG,QAAQ,CAAC,IAAI,CAACL,MAAM,CAACC,KAAK,CAACC,SAAS,CAAC;MACrDC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACE,QAAQ,CAACC,gBAAgB,CAACL,SAAS,CAAC;MACrD,IAAIM,MAAK,GAAI,IAAI,CAACF,QAAQ,CAACC,gBAAgB,CAACL,SAAS,CAAC,CAACM,MAAM;MAE7D,IAAI,CAACd,YAAW,GAAI,IAAI;MAExB,IAAI,CAACV,QAAO,GAAI,IAAI,CAACsB,QAAQ,CAACG,aAAa,CAACD,MAAM,CAAC,CAAC7B,IAAI;MACxD,IAAI,CAACM,WAAU,GAAI,IAAI,CAACqB,QAAQ,CAACG,aAAa,CAACD,MAAM,CAAC,CAACvB,WAAW;MAElE,IAAI,CAACO,UAAS,GAAI,IAAI,CAACc,QAAQ,CAACC,gBAAgB,CAACL,SAAS,CAAC,CAACQ,UAAU;MACtE,IAAI,CAACnB,YAAW,GAAI,IAAI,CAACe,QAAQ,CAACC,gBAAgB,CAACL,SAAS,CAAC,CAACS,WAAW;MACzE,IAAI,CAAClB,OAAM,GAAI,IAAI,CAACa,QAAQ,CAACC,gBAAgB,CAACL,SAAS,CAAC,CAACT,OAAO;MAChE,IAAI,CAACH,MAAK,GAAI,IAAI,CAACgB,QAAQ,CAACC,gBAAgB,CAACL,SAAS,CAAC,CAACU,aAAa;MACrE,IAAI,CAAC1B,QAAO,GAAI,IAAI,CAACoB,QAAQ,CAACC,gBAAgB,CAACL,SAAS,CAAC,CAAChB,QAAQ;MAClE,IAAI,CAACG,MAAK,GAAI,IAAI,CAACiB,QAAQ,CAACC,gBAAgB,CAACL,SAAS,CAAC,CAACb,MAAM;IAEhE,OACG;MACHc,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;EACDS,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,MAAMC,WAAU,GAAI,IAAI,CAACxB,YAAY;MACrC,MAAMyB,SAAQ,GAAI,IAAI,CAAC3B,MAAM;MAC7B,MAAM4B,WAAU,GAAI,IAAI,CAAC/B,QAAQ;MACjC,MAAMgC,SAAQ,GAAI,IAAI,CAAC5B,MAAM;MAC7B,MAAM6B,UAAS,GAAI,IAAI,CAAC1B,OAAO;MAE/B,IAAI2B,UAAS,GAAI;QACfT,WAAW,EAAEI,WAAW;QACxBL,UAAU,EAAE,IAAI,CAACJ,QAAQ,CAACC,gBAAgB,CAAC,IAAI,CAACD,QAAQ,CAACe,gBAAgB,EAAE,CAAC,CAACX,UAAU;QACvFxB,QAAQ,EAAE+B,WAAW;QACrB5B,MAAM,EAAE2B,SAAS;QACjBM,MAAM,EAAE,MAAM;QACd7B,OAAO,EAAE0B,UAAU;QACnBX,MAAM,EAAE,IAAI,CAACF,QAAQ,CAACe,gBAAgB,EAAE;QACxCT,aAAa,EAAEM,SAAS;QACxBhB,SAAS,EAAEqB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAI,KAAK;MAC7C,CAAC;MACD,IAAI,CAACnB,QAAQ,CAACoB,UAAU,CAACN,UAAU,CAAC;MAEpCjB,OAAO,CAACC,GAAG,CAACgB,UAAU,CAAC,EACvBjB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACE,QAAQ,CAACqB,eAAe,EAAE;IAC7C,CAAC;IACDC,UAAUA,CAACC,KAAI,EAAIC,OAAO,EAAC;MACzB3B,OAAO,CAACC,GAAG,CAAC,IAAI,CAAClB,QAAO,EAAI,IAAI,CAACG,MAAM;MACvCc,OAAO,CAACC,GAAG,CAACyB,KAAI,EAAIC,OAAO;MAC3B,IAAI,CAACD,KAAK,EAAC;QACT,OAAO,EAAE;MACX,OAAO,IAAIC,OAAO,EAAC;QACjB,OAAO,YAAY;MACrB,OAAO,OAAO,UAAU;IAC5B;EACA;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}