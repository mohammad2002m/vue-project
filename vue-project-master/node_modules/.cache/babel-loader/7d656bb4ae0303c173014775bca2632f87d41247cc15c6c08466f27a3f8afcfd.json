{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"button\", null, \"submit\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => _ctx.test && _ctx.test(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.name = $event),\n    type: \"text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.name]]), _createElementVNode(\"button\", {\n    type: \"button\",\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.v$.$touch())\n  }, \"touch\"), _hoisted_1], 32 /* HYDRATE_EVENTS */), _createElementVNode(\"pre\", null, _toDisplayString(_ctx.name), 1 /* TEXT */), _createElementVNode(\"pre\", null, \"dirty: \" + _toDisplayString(_ctx.v$.$dirty), 1 /* TEXT */), _createElementVNode(\"pre\", null, \"error: \" + _toDisplayString(_ctx.v$.$error), 1 /* TEXT */), _createElementVNode(\"pre\", null, \"invalid: \" + _toDisplayString(_ctx.v$.$invalid), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","onSubmit","_cache","_withModifiers","args","_ctx","test","name","$event","type","onClick","v$","$touch","_hoisted_1","_toDisplayString","$dirty","$error","$invalid"],"sources":["D:\\Vue\\vue-project-last-edition\\vue-project\\vue-project-master\\src\\components\\RequestForm\\RequestForm.vue"],"sourcesContent":["<template>\r\n  <form @submit.prevent=\"test\">\r\n    <input v-model=\"name\" type=\"text\"> \r\n    <button type=\"button\" @click=\"v$.$touch()\">touch</button>\r\n    <button>submit</button>\r\n  </form>\r\n\r\n  <pre>{{ name }}</pre>\r\n\r\n  <pre>dirty: {{ v$.$dirty }}</pre>\r\n  <pre>error: {{ v$.$error }}</pre>\r\n  <pre>invalid: {{ v$.$invalid }}</pre>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, ref } from 'vue'\r\nimport useVuelidate from '@vuelidate/core'\r\nimport { required } from '@vuelidate/validators'\r\n\r\nexport default defineComponent({\r\n  name: 'Home',\r\n  setup() {\r\n    const name = ref('')\r\n\r\n    const v$ = useVuelidate(\r\n    {\r\n        name: { required },\r\n    },\r\n    { name },\r\n  )\r\n\r\n  const test = () => {\r\n    v$.value.$touch()\r\n\r\n    if (!v$.value.$error) {\r\n      console.log('success')\r\n    }\r\n  }\r\n\r\n  return {v$, name, test}\r\n  },\r\n})\r\n</script>\r\n"],"mappings":";gCAIIA,mBAAA,CAAuB,gBAAf,QAAM;;;6DAHhBA,mBAAA,CAIO;IAJAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,IAAA,CAAAC,IAAA,IAAAD,IAAA,CAAAC,IAAA,IAAAF,IAAA,CAAI;sBACzBJ,mBAAA,CAAkC;+DAAlBK,IAAA,CAAAE,IAAI,GAAAC,MAAA;IAAEC,IAAI,EAAC;iDAAXJ,IAAA,CAAAE,IAAI,E,GACpBP,mBAAA,CAAyD;IAAjDS,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAAR,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAAEH,IAAA,CAAAM,EAAE,CAACC,MAAM;KAAI,OAAK,GAChDC,UAAuB,C,4BAGzBb,mBAAA,CAAqB,aAAAc,gBAAA,CAAbT,IAAA,CAAAE,IAAI,kBAEZP,mBAAA,CAAiC,aAA5B,SAAO,GAAAc,gBAAA,CAAGT,IAAA,CAAAM,EAAE,CAACI,MAAM,kBACxBf,mBAAA,CAAiC,aAA5B,SAAO,GAAAc,gBAAA,CAAGT,IAAA,CAAAM,EAAE,CAACK,MAAM,kBACxBhB,mBAAA,CAAqC,aAAhC,WAAS,GAAAc,gBAAA,CAAGT,IAAA,CAAAM,EAAE,CAACM,QAAQ,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}